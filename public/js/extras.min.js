(function () {
'use strict';

// templates are imported via gulp job
angular.module('templates', []);

var baseElement = angular.element(document).find('base');
if(baseElement.length == 1 && baseElement[0].href && baseElement[0].href.indexOf('/dnskillsim/') > 0) {
    angular.module('dnsim', ['ngRoute','angulartics','angulartics.google.analytics','templates', 'ngAria', 'infinite-scroll']);
    angular.module('dnsim').config(['$locationProvider', setupHtml5Mode]);
    angular.module('dnsim').config(['$compileProvider', allowAutoBindings]);
}
else {
    console.log('base', baseElement);
    angular.module('dnsim', ['ngRoute','templates']);
}

function allowAutoBindings($compileProvider) {
    // angular 1.6 requires use of $onInit unless this config is set
    // https://toddmotto.com/angular-1-6-is-here
    $compileProvider.preAssignBindingsEnabled(true);
};

function setupHtml5Mode($locationProvider) {
    $locationProvider.html5Mode({
        enabled: true,
        requireBase: true,
        rewriteLinks: true
    });
};

})();
(function () {
'use strict';

angular.module('dnsim').factory('itemColumnsToLoad',[itemColumnsToLoad]);
function itemColumnsToLoad() {
  return {
    mainDnt: {
      NameID: true, DescriptionID: true, NameIDParam: true, DescriptionIDParam: true,
      Type: true,TypeParam1: true,TypeParam2: true, TypeParam3: true, LevelLimit: true, NeedJobClass: true, Rank: true,
      State1: true, StateValue1: true, State1_Max: true, State1_GenProb: true,
      State2: true, StateValue2: true, State2_Max: true,
      State3: true, StateValue3: true, State3_Max: true,
      State4: true, StateValue4: true, State4_Max: true,
      State5: true, StateValue5: true, State5_Max: true,
      State6: true, StateValue6: true, State6_Max: true,
      State7: true, StateValue7: true, State7_Max: true,
      State8: true, StateValue8: true, State8_Max: true,
      State9: true, StateValue9: true, State9_Max: true,
      State10: true,StateValue10: true,State10_Max: true,
      EnchantID: true,
      SkillID: true,
      dragonjeweltype: true, AbleWStorage: true, ExchangeType:true, IconImageIndex: true, IsCash: true, DisjointDrop1: true, Disjointamount: true
    },
    partsDnt: {
      SetItemID: true
    },
    enchantDnt: {
      EnchantID: true,EnchantLevel: true,EnchantRatio: true,BreakRatio: true,MinDown: true,MaxDown: true,NeedCoin: true,
      DisjointDrop: true,
      NeedItemID1: true,NeedItemCount1: true,NeedItemID2: true,NeedItemCount2: true,NeedItemID3: true,NeedItemCount3: true,NeedItemID4: true,NeedItemCount4: true,NeedItemID5: true,NeedItemCount5: true,ProtectItemCount: true,
      State1: true,State1Value: true,State2: true,State2Value: true,State3: true,State3Value: true,State4: true,State4Value: true,State5: true,State5Value: true,State6: true,State6Value: true,State7: true,State7Value: true,State8: true,State8Value: true,State9: true,State9Value: true,State10: true,State10Value: true
    },
    potentialDnt : {
      PotentialID: true, PotentialNo: true,PotentialRatio: true,
      State1: true,State1Value: true,
      State2: true,State2Value: true,
      State3: true,State3Value: true,
      State4: true,State4Value: true,
      State5: true,State5Value: true,
      State6: true,State6Value: true,
      State7: true,State7Value: true,
      State8: true,State8Value: true,
      State9: true,State9Value: true,
      State10: true,State10Value: true,
      State11: true,State11Value: true,
      State12: true,State12Value: true,
      State13: true,State13Value: true,
      State14: true,State14Value: true,
      State15: true,State15Value: true,
      State16: true,State16Value: true
    },
    gemDnt: {
      Type: true
    },
    setDnt : null,
    sparkDnt: null,
    jobsDnt: {
      JobName: true,JobNumber: true,BaseClass: true,ParentJob: true, EnglishName: true, JobIcon: true
    },
    jobBaseStatColsToLoad: {
      Strength:true,Agility:true,Intelligence:true,Stamina:true,AggroperPvE:true,BaseMP:true
    },
    statCapColsToLoad: {
      Cbase: true,
      Cdefense: true,
      Ccritical: true,
      Cfinaldamage: true,
      CcriticalDamage: true,
    },
    jobConversionColsToLoad: {
      HP: true,StrengthAttack: true,AgilityAttack: true,IntelligenceAttack: true,PhysicalDefense: true,MagicDefense: true,Critical: true,CriticalResistance: true,Stiff: true,StiffResistance: true,Stun: true,StunResistance: true,MoveSpeed: true,MoveSpeedRevision: true,DownDelay: true,ElementAttack: true,ElementDefense: true,ElementDefenseMin: true,ElementDefenseMax: true,StrengthIntelligenceToCriticalDamage: true
    }
  }
}

})();
(function () {
'use strict';

angular.module('dnsim').factory('dntData', ['$rootScope','$timeout',dntData]);

function dntData($rootScope,$timeout) {
  
  function createLoader(dntLocation, file, colsToLoad) {

    var loader = {
      reader: new DntReader(),
      
      loaded: false,
      startedLoading: false,
      
      file: file,
      
      dntLocation: dntLocation,
      progressCallback: null,
      completeCallbacks : [],
      
      init: function(progress, complete) {
        
        if(this.loaded) {
          complete();
        }
        else {
          this.progressCallback = progress;
          this.completeCallbacks.push(complete);
          
          if(!this.startedLoading) {
            this.startedLoading = true;
            var t = this;
            
            this.reader.colsToLoad = colsToLoad;
            
            if(this.dntLocation && 
              this.dntLocation.url &&
              this.dntLocation.url.length) {

              $rootScope.$broadcast('DNTDATA_LOAD_EVENT');

              $timeout(function() {
                t.reader.loadDntFromServerFile(
                  t.dntLocation.url + '/' + file,
                  function(msg) { if(t.progressCallback != null) t.progressCallback(msg) }, 
                  function(result, fileName) {
                    // console.info('dnt loading complete : ' + file);
                    t.loaded = true;
                    
                    angular.forEach(t.completeCallbacks, function(value, key) {
                      value();
                    });
                    t.completeCallbacks = [];
                    $rootScope.$broadcast('DNTDATA_LOAD_EVENT');
                  },
                  function(msg) {
                    $rootScope.$broadcast('DNTDATA_LOAD_ERROR');
                    t.startedLoading = false;
                    t.loaded = false;
                  }  );
              });
            }
            else {
              // console.log("dnt location not set!");
            }
          }
        }
      },
      
      reset: function() {
        this.reader = new DntReader();
        this.loaded = false;
        this.startedLoading = false;
      }
    }
  
    return loader;
  };
  
  return {
    loaders : {},
    findIndexes : {},
    dntLocation : null,
    
    setLocation: function(location) {
      this.dntLocation = location;
      var t = this;
      angular.forEach(this.loaders, function(value, key) {
        if(value.dntLocation != location) {
          value.dntLocation = location;
          t.reset(key);
        }
      });
    },
    
    init : function (fileName, colsToLoad, progress, complete) {
      if(!progress) {
        progress = function() {};
      }
      if(!(fileName in this.loaders)) {
        if(fileName.length > 0) {
          this.loaders[fileName] = createLoader(this.dntLocation, fileName, colsToLoad);
        }
      }
      this.loaders[fileName].init(progress, complete);
    },
    getData : function (fileName) {
      if(this.isLoaded(fileName)) {
        var reader = this.loaders[fileName].reader;
        var retVal = new Array(reader.numRows);
        for(var i=0;i<reader.numRows;++i) {
          retVal[i] = reader.getRow(i);
        }
        
        return retVal;
      }
      else {
        return [];
      }
    },
    find : function(fileName, column, value) {
      var results = this.findFast(fileName, column, value);
      var retVal = [];
      var numResults = results.length;
      for(var i=0;i<numResults;++i) {
        retVal.push(this.getRow(fileName, results[i]));
      }
      
      return retVal;
    },
    findFast : function(fileName, column, value) {
      
      if(this.isLoaded(fileName)) {
        if(!(fileName in this.findIndexes)){
          this.findIndexes[fileName] = {};
        }
        
        var reader = this.loaders[fileName].reader;
        var colIndex = reader.columnIndexes[column];
        
        var findIndex = this.findIndexes[fileName];
        
        if(!(column in findIndex)) {
          var index = {}
          findIndex[column] = index;
          
          var results = [];
          
          var data = reader.data;
          var len = data.length;
          for(var r=0;r<len;++r) {
            var d = data[r];
            var val = d[colIndex];

            if(!(val in index)) {
              index[val] = [r];
            }
            else {
              index[val].push(r);
            }
          }
        }
        
        if(value in findIndex[column]) {
          return findIndex[column][value];
        }
        else {
          return [];
        }
      }
      
      return [];
    },
    isLoaded : function(fileName) {
      return fileName in this.loaders && this.loaders[fileName].loaded;
    },
    hasStartedLoading : function(fileName) {
      return this.isLoaded(fileName) || (fileName in this.loaders && this.loaders[fileName].startedLoading);
    },
    reset : function(fileName) {
      if(fileName in this.loaders) {
        this.loaders[fileName].reset();
        delete this.loaders[fileName];
        delete this.findIndexes[fileName];
      }
    },
    resetAll : function() {
      var t = this;
      angular.forEach(this.loaders, function(value, key) {
        t.reset(key);
      });
    },
    anyLoading : function() {
      var t = this;
      var found = 0;
      angular.forEach(this.loaders, function(value, key) {
        if(!value.loaded && value.startedLoading) {
          found++;
        }
      });
      
      return found;
    },
    getNumRows : function(fileName) {
      if(this.isLoaded(fileName)) {
        return this.loaders[fileName].reader.numRows;
      }
      else {
        return 0;
      }
    },
    getRow : function(fileName, index) {
      if(this.isLoaded(fileName)) {
        return this.loaders[fileName].reader.getRow(index);
      }
      else {
        return {};
      }
    },
    lookupValue: function(fileName, data, columnName) {
      if(this.isLoaded(fileName)) {
        return data[this.loaders[fileName].reader.columnNames[columnName]];
      }
      else {
        return null;
      }
    },
    convertData: function(fileName, data) {
      if(this.isLoaded(fileName)) {
        return this.loaders[fileName].reader.convertData(data);
      }
      else {
        return null;
      }
    },
    getValue : function(fileName, index, columnName) {
      if(this.isLoaded(fileName)) {
        return this.loaders[fileName].reader.getValue(index, columnName);
      }
      else {
        return null;
      }
    }
  };
}

})();
(function () {
'use strict';

angular.module('dnsim').factory('dntReset',['jobs','dntData',dntReset]);
function dntReset(jobs, dntData) {
  return function() {
    
    jobs.reset();
    dntData.resetAll();
  }
}

})();
(function () {
'use strict';

angular.module('dnsim').factory('jobs', ['dntData', 'translations', 'itemColumnsToLoad', jobs]);
function jobs(dntData, translations, itemColumnsToLoad) {
  
  var fileName ='jobtable.json';
  var colsToLoad = itemColumnsToLoad.jobsDnt;
  
  return {
    fileName : fileName,
    allJobs : null,
    
    isLoaded : function() {
      return dntData.isLoaded(fileName);
    },
    
    hasStartedLoading: function() {
      return dntData.hasStartedLoading(fileName);
    },
    
    init : function(progress, complete) {
      dntData.init(fileName, colsToLoad, progress, function() {
        complete();
        });
    },

    reset : function() {
      this.allJobs = null;
      dntData.reset(fileName);
    },
    
    getFinalJobs : function () {
      var jobs = [];
      var alljobs = this.getAllJobs();
      if(alljobs) {
        var numRows = alljobs.length;
        for(var r=0;r<numRows;++r) {
          if(alljobs[r].d.JobNumber == 2 && alljobs[r].d.JobIcon > 0) {
            jobs.push(alljobs[r]);
          }
        }
      }
      
      return jobs;
    },
    
    getBaseJobs : function () {
      var retVal=[];
      var baseJobs = {};

      var self = this;
      angular.forEach(this.getFinalJobs(), function(job, key) {
        baseJobs[self.getBaseJobName(job)] = job;
      });

      angular.forEach(baseJobs, function(job, jobName) {
        retVal.push(jobName);
      });

      return retVal;
    },
    
    getAllJobs : function () {
      if(this.allJobs == null && this.isLoaded() && translations.isLoaded()) {
        var jobs = [];
        var data = dntData.getData(fileName);
        var numRows = data.length;
        for(var r=0;r<numRows;++r) {
          jobs[jobs.length] = this.createJob(data[r]);
        }
        
        this.allJobs = jobs;
      }
      return this.allJobs;
    },
    
    getById: function(id) {
      var data = this.getAllJobs();
      if(data) {
        var numRows = data.length;
        for(var r=0;r<numRows;++r) {
          if(data[r].id == id) {
            return data[r];
          }
        }
      }
    },
    
    getByEnglishName: function(englishName) {
      var data = this.getAllJobs();
      if(data) {
        var numRows = data.length;
        for(var r=0;r<numRows;++r) {
          if(data[r].d.EnglishName == englishName) {
            return data[r];
          }
        }
      }
    },
    
    createJob : function(d) {
      var t = this;
      return {
          d : d,
          id : d.id,
          name : translations.translate(d.JobName),
          isClassJob : function(c) {
            return t.isClassJob(d, c);
          }
        };
    },
    
    isClassJob : function (d, c) {
      if(c == 0) return true;
      if(d.id == c) {
        return true;
      }
      
      var parentJob = d.ParentJob;
      
      if(!parentJob) return false;
      if(parentJob == c) return true;

      var parentJobData = this.getById(parentJob);
      if(parentJobData) {
        return this.isClassJob(parentJobData.d, c);
      }
      
      return false;
    },
    
    getBaseJobName : function(job) {
      if(this.isLoaded()) {
        var alljobs = this.getAllJobs();
        if(alljobs) {
          var numRows = alljobs.length;
          for(var r=0;r<numRows;++r) {
            if(alljobs[r].id == (job.d.BaseClass+1) && alljobs[r].d.EnglishName) {
              return alljobs[r].d.EnglishName;
            }
          }
        }
      }
      
      return null;
    },
  }
}

})();
(function () {
'use strict';

angular.module('dnsim').factory('onlineService', ['$window','$q',onlineService]);

function onlineService($window, $q) {
  console.log('setup online service');
  
  var service = {
    login: login,
    getUser: function() {
      return firebase.auth().currentUser;
    },
    signOut: signOut,
    deleteAccount: deleteAccount,
    
    getUserBuilds: getUserBuilds,
    deleteBuild: deleteBuild,
    saveBuild: saveBuild,
    getBuild: getBuild,
    getClassBuilds: getClassBuilds,
    
    getProfile: getProfile,
    saveProfile: saveProfile,
    
    stripBuildName: stripBuildName
  };
  
  init();
  
  return service;
  
  function init() {
    console.log('init');
    firebase.initializeApp({
      apiKey: "AIzaSyC-Mckgho1xAI2SQzsKnpsr2ObDKOhdSrE",
      authDomain: "dngearsim.firebaseapp.com",
      databaseURL: "https://dngearsim.firebaseio.com",
      storageBucket: "dngearsim.appspot.com",
    });
  }
  
  function login() {
    return $q(function(resolve, reject) {
      var auth = firebase.auth();
        
      auth.onAuthStateChanged(function(user) {
        if(user == null) {
          console.log('redirecting');
          $window.location.href = 'login.html';
        }
        else {
          console.log('logged in');
          resolve(user);
        }
      });
    });
  }
  
  function getProfile(uid) {
    console.log('get profile');
    return $q(function(resolve, reject) {
      firebase.database().ref('profile/' + uid).once('value', function(storedProfile) {
        if(storedProfile) {
          resolve(storedProfile.val());
        }
        else {
          resolve({});
        }
      });
    });
  }
  
  function getBuild(uid, buildName) {
    console.log('get build');
    return $q(function(resolve, reject) {
      firebase.database().ref('skill-builds/' + uid + '/' + stripBuildName(buildName)).once('value', function(storedProfile) {
        if(storedProfile && storedProfile.val()) {
          try {
            resolve(decompressBuild(storedProfile.val()));
          }
          catch(ex) {
            reject(ex);
          }
        }
        else {
          resolve({});
        }
      });
    });
  }
  
  function saveProfile(profile) {
    return $q(function(resolve, reject) {
      var user = service.getUser();
      if(user) {
        profile = angular.copy(profile);
        deleteNullProperties(profile, true);
        firebase.database().ref('profile/' + user.uid).set(profile).then(resolve);
      }
    });
  }
  
  function getUserBuilds(uid) {
    console.log('get builds');
    return $q(function(resolve, reject) {
      // console.log('getting builds');
      firebase.database().ref('skill-builds/' + uid).once('value', function(storedBuilds) {
        if(storedBuilds) {
          try {
            var retVal = {};
            var val = storedBuilds.val();
            for(var buildName in val) {
              retVal[buildName] = decompressBuild(val[buildName]);
            }
            resolve(retVal);
          }
          catch(ex) {
            reject(ex);
          }
        }
        else {
          resolve({});
        }
      });
    });
  }
  
  function getClassBuilds(job, level) {
    console.log('get class builds');
    return $q(function(resolve, reject) {
      // console.log('getting builds', job.id);
      
      let path;
      if(level) {
        path = 'level-job-skill-builds/' + level + '/' + job.id;
      }
      else {
        path = 'job-skill-builds/' + job.id;
      }
      
      firebase.database().ref(path).once('value', function(jobBuilds) {
        // console.log('ok');
        if(jobBuilds) {
          resolve(jobBuilds.val());
        }
        else {
          resolve({});
        }
      });
    });
  }
  
  function compressBuild(build) {
    
    if(build.items) {
      _.each(build.items, function(item) {
        delete item.fullStats;
      });
    }
    
    var stringifiedData = JSON.stringify(build);
    return LZString.compressToUTF16(stringifiedData);
  }
  
  function decompressBuild(compressedBuild) {
    try {
      var stringifiedData = LZString.decompressFromUTF16(compressedBuild);
      var build = JSON.parse(stringifiedData);
      
      if(build.items) {
        _.each(build.items, function(item) {
          item.fullStats = item.stats;
          
          if(item.enchantmentStats && item.enchantmentStats.length) {
            item.fullStats = hCodeValues.mergeStats(item.enchantmentStats, item.fullStats);
          }
          
          if(item.sparkStats && item.sparkStats.length) {
            item.fullStats = hCodeValues.mergeStats(item.sparkStats, item.fullStats);
          }
        });
      }
      
      return build;
    }
    catch(ex) {
      console.log('cannot parse build ', stringifiedData);
      throw ex;
    }
  }
  
  function saveBuild(buildName, build) {
    var user = service.getUser();
    var actions = [];
    if(user) {
      build = angular.copy(build);
      deleteNullProperties(build, true);
      // console.log('saving', build);
      actions.push(
        firebase.database().ref('skill-builds/' + user.uid + '/' + stripBuildName(buildName)).set(compressBuild(build))
      );
      
      if(build.job) {
        console.log('saving build');
          
        var data = {};
        if(build.region) {
          data.region = build.region;
        }
        if(build.guild) {
          data.guild = build.guild;
        }
        if(build.about) {
          data.about = build.about;
        }
        
        deleteNullProperties(data, true);
          
        actions.push(
          firebase.database().ref('job-skill-builds/' + build.job + '/' + user.uid + '/' + stripBuildName(buildName)).set(data)
        );
        actions.push(
          firebase.database().ref('level-job-skill-builds/' + build.level + '/' + build.job + '/' + user.uid + '/' + stripBuildName(buildName)).set(data)
        );
      }
    }
    return $q.all(actions);
  }
  
  function deleteNullProperties(test, recurse) {
    for (var i in test) {
        if (test[i] === undefined) {
            delete test[i];
        } else if (recurse && typeof test[i] === 'object') {
            deleteNullProperties(test[i], recurse);
        }
    }
  }
  
  function signOut() {
    var auth = firebase.auth();
    return $q(function(resolve, reject) {
      auth.signOut().then(function() {
        resolve();
      }, function(error) {
        reject();
      });
    });
  }
  
  function deleteAccount(builds) {
    var auth = firebase.auth();
    var user = service.getUser();
    
    return $q(function(resolve, reject) {
      
      var pList = [
        firebase.database().ref('builds/' + user.uid).remove(),
        firebase.database().ref('skill-builds/' + user.uid).remove(),
        firebase.database().ref('profile/' + user.uid).remove(),
        firebase.database().ref('private/' + user.uid).remove()];
        
      for(var buildName in builds) {
        if(builds[buildName].job) {
          let build = builds[buildName];
          let id = builds[buildName].job;
      
          pList.push(
            firebase.database().ref('job-builds/' + id + '/' + user.uid).remove()
          );
          pList.push(
            firebase.database().ref('job-skill-builds/' + build.job + '/' + user.uid).remove()
          )
          if(build.level) {
            pList.push(
              firebase.database().ref('job-skill-builds/' + build.level + '/' + build.job + '/' + user.uid).remove()
            )
          }
        }
      }
        
      $q.all(pList).then(function() {
        console.log('deleted data');
        user.delete().then(function() {
          console.log('deleted user');
          auth.signOut().then(function() {
            console.log('signed out');
            resolve();
          }, function(error) {
            reject();
          });
        });
      });
    });
  }
  
  function deleteBuild(buildName, build) {
    
    var pList = [];
    var user = service.getUser();
    if(user) {
      pList.push(
        firebase.database().ref('skill-builds/' + user.uid + '/' + stripBuildName(buildName)).remove());
      
      if(build.job) {
        pList.push(
          firebase.database().ref('job-skill-builds/' + build.job + '/' + user.uid + '/' + stripBuildName(buildName)).remove());
        pList.push(
          firebase.database().ref('level-job-skill-builds/' + build.level + '/' + build.job + '/' + user.uid + '/' + stripBuildName(buildName)).remove());
      }
    }
    
    return $q.all(pList);
  }
  
  function stripBuildName(buildName) {
    return buildName.replace(/[.$\[\]#\/]/g, '');
  }
}

})();
(function () {
'use strict';

angular.module('dnsim').factory('region', ['translations','dntReset','dntData','$window','$timeout','$route', region]);
function region(translations,dntReset,dntData,$window,$timeout,$route) {
  
  var alternativeFiles = {region: 'ALT', name: 'Alternative user specified files', url : ''};
  var hostedFiles =[
    {region: 'sea', name: 'south east asia', url : 'https://seadnfiles.netlify.app/public'},
      {region: 'na', name: 'north america', url : 'https://nadnfiles.netlify.app/public'},
      {region: 'th', name: 'thailand', url : 'https://thdnfiles.netlify.app/public'},
      {region: 'tw', name: 'taiwan 臺灣', url : 'https://twdnfiles.firebaseapp.com'},
      {region: 'jdn', name: 'japan 日本', url : 'https://jdnfiles.netlify.app/public'},
      {region: 'cdn', name: 'china 中國', url : 'https://cdnfiles.netlify.app/public'},
      {region: 'kdn', name: 'korea 대한민국', url : 'https://kdnfiles.netlify.app/public'},
    ];
  
  var dntLocationRegion = localStorage.getItem('lastDNTRegion');
  var dntLocation = null;
  if(dntLocationRegion != null) {
    angular.forEach(hostedFiles, function(hostedFile, index) {
      if(hostedFile.region == dntLocationRegion) {
        dntLocation = hostedFile;
      }
    });
  }
  
  function getLocationFromUrl(url) {
    var parts = $window.location.href.replace('//', ':').split('/');
    if(parts.length > 1) {
      return parts[1];
    }
  }

  return {
    hostedFiles : hostedFiles,
    alternativeFiles : alternativeFiles,
    dntLocation : dntLocation,
    
    setCustomUrl: function(url) {
      // console.log('setting custom location');
      this.alternativeFiles.url = url;

      var newFiles = [];
      angular.forEach(hostedFiles, function(hostedFile, index) {
        if(hostedFile.region != alternativeFiles.region) {
          newFiles.push(hostedFile);
        }
      });
  
      newFiles.push(alternativeFiles);
      hostedFiles = newFiles;
      this.hostedFiles = newFiles;
    },
    
    setLocationByName: function(locationName) {
      var newLocation = null;
      
      angular.forEach(hostedFiles, function(hostedFile, index) {
        if(hostedFile.region == locationName) {
          newLocation = hostedFile;
        }
      });
        
      this.setLocation(newLocation);
    },
    
    setLocation: function(location) {
      if(location && location != this.dntLocation) {
        this.dntLocation = location;
      }
      
      var currentLocation = getLocationFromUrl();
      if(this.dntLocation && this.dntLocation.region != currentLocation) {
        var parts = $window.location.href.replace('//', '::').split('/');
        if(parts.length > 1 && parts[1] == 'dnskillsim') {
          console.log('running github', location);
          localStorage.setItem('lastDNTRegion', location.region);
          this.setTLocation(location);
          this.init();
        }
        else {
          console.log('running on heroku');
          var newUrl = $window.location.href.substring(0, parts[0].length) + '/' + this.dntLocation.region;
          for(var i=2;i<parts.length;++i) {
            newUrl += '/' + parts[i];
          }
          console.log('setting location to ', newUrl);
          $window.location.href = newUrl;
        }
      }
    },
    
    setTLocation: function(location) {
      
      if(location != this.tlocation) {
        
        this.tlocation = location;
        sessionStorage.removeItem('UIStrings');
        localStorage.removeItem('UIStrings_file');
        dntReset();
        translations.reset();
        if(location) {
          var override = this.getOverride();
          translations.small = !override;
          translations.location = this.tlocation.url;
          translations.init(function() {}, function() {
            $route.reload();
          });
        }
      }
    },
    
    init: function() {
      var urlLocation = getLocationFromUrl();
      if(urlLocation) {
        if(urlLocation == 'dnskillsim') {
          this.tlocation = this.dntLocation;
          translations.small = true;
          if(this.tlocation) {
            translations.location = this.tlocation.url;
          }
          dntData.setLocation(this.dntLocation);
          translations.init(function() {}, $timeout);
        }
        else {
          this.setLocationByName(urlLocation);
        }
      }
    },
    
    getOverride: function() {
      return false;
    }
  }
}

})();

(function () {
'use strict';

angular.module('dnsim').factory('translations', ['$routeParams', '$rootScope', translations]);
function translations($routeParams, $rootScope) {

  var dnTranslations = new DnTranslations();
  var smallFile = 'uistring.optimised.json';
  var bigFile = 'uistring.json';

  var completeCallback = [];
  var progressCallback = [];

  return {
    
    reset : function() {
      dnTranslations = new DnTranslations();
      dnTranslations.sizeLimit = 100;
      this.loaded = false;
      this.startedLoading = false;
      completeCallback = [];
      progressCallback = [];
    },
    
    getFileName: function() {
      if(this.small) {
        // console.log('loading optimised translations');
        return smallFile;
      }
      else {
        // console.log('loading full translations');
        return bigFile;
      }
    },
    
    loaded : false,
    startedLoading : false,
    small: false,
    
    location : null,
  
    init : function(progress, complete) {

      if(this.isLoaded()) {
        complete();
      }
      else {
        progressCallback = [];
        if(progress) {
          progressCallback.push(progress);
        }
        if(complete) {
          completeCallback.push(complete);
        }
  
        if(!this.startedLoading) {
          this.startedLoading = true;
          var t = this;
          
          var fileName = null;
          if(this.location && this.location != '') {
            fileName = this.location + '/' + this.getFileName();
            
            if(fileName != localStorage.getItem("UIStrings_file")) {
              sessionStorage.removeItem('UIStrings');
              localStorage.removeItem('UIStrings_file');
            }
          }
          
          $rootScope.$broadcast('TRANSLATION_LOAD_EVENT');
          dnTranslations.loadDefaultFile(
            fileName, 
            function(msg) {
              angular.forEach(progressCallback, function(value, key) { value(msg); });
            }, 
            function() {
              t.loaded = true;
              angular.forEach(completeCallback, function(value, key) { value(); });
              completeCallback = [];
              $rootScope.$broadcast('TRANSLATION_LOAD_EVENT');
            },
            function(msg) {
              angular.forEach(progressCallback, function(value, key) { value(msg); });
              $rootScope.$broadcast('TRANSLATION_LOAD_ERROR');
              t.startedLoading = false;
              t.loaded = false;
            }
          );
        }
      }
    },
    
    isLoaded : function() {
      if(!this.loaded) {
        var fileName = this.location + '/' + this.getFileName();
        
        if(fileName != localStorage.getItem("UIStrings_file")) {
          sessionStorage.removeItem('UIStrings');
          localStorage.removeItem('UIStrings_file');
        }

        this.loaded = dnTranslations.loadFromSession();
        if(this.loaded) {
          this.startedLoading = true;
        }
      }
      return this.loaded;
    },
    
    translate : function(id,idParam) {
      if(this.loaded) {
        
        var name;
        if(!id) {
          return '';
        }
        else {
          name = dnTranslations.translate(id);
          
          if(typeof name != 'string') {
            return 'm' + name;
          }
        }
        
        if(idParam) {
          var params = idParam.split(',');
          for(var p=0;p<params.length;++p) {
            var pid = params[p];
            if(pid.indexOf('{') == 0) {
              pid = params[p].replace(/\{|\}/g,'');
              pid = dnTranslations.translate(pid);
            }
            
            name = name.replace('{' + p + '}', pid);
          }
        }

        return name;
      }
      else {
        return 'm' + id;
      }
    }
  }
}

})();
(function () {
'use strict';
angular.module('dnsim').controller('CreateCtrl', ['$location','$window','$timeout','region','$routeParams', create]);

function create($location, $window, $timeout, region, $routeParams) {
  'use strict';
  
  var vm = this;
  
  if($routeParams.region) {
    region.setLocationByName($routeParams.region);
  }
  
  vm.setJob = function() {
    $timeout(function() {
      console.log('they set the job', vm.job);
      $window.location.href = 'https://dnskillsim.herokuapp.com/' + region.dntLocation.region + '/' + vm.job.d.EnglishName.toLowerCase();
    });
  }
  
}

})();
(function () {
'use strict';

angular.module('dnsim').directive('dnsimViewBuild', viewBuild);

function viewBuild() {
  return {
    restrict: 'E',
    scope: true,
    bindToController: {
      build: '=build',
    },
    templateUrl: 'ui/build/view-build.html',
    controllerAs: 'ctrl',
    controller: [viewBuildController],
  };
}

function viewBuildController() {
  
  var vm = this;

  vm.baseSkillNums = [];
  vm.specSkillNums = [];
  vm.finalSkillNums = [];
  vm.awakenSkillNums = [];
  setupSkillNums();

  function setupSkillNums() {
    for(var i=0;i<6*4;++i) {
      vm.baseSkillNums.push(getSkillNum(i));
    }
    
    for(i=6*4;i<6*4*2;++i) {
      vm.specSkillNums.push(getSkillNum(i));
    }
    
    for(i=6*4*2;i<6*4*3;++i) {
      vm.finalSkillNums.push(getSkillNum(i));
    }
    
    for(i=6*4*3;i<6*4*4;++i) {
      vm.awakenSkillNums.push(getSkillNum(i));
    }
  }
  
  function getSkillNum(index) {
    if(vm.build) {
      var chars = vm.build.build.replace(/[!\.']/g,'').split('');
      if(chars.length > index) {
        var char = chars[index];
        var num = parseInt(char, 36);
        if(num >= 0) {
          return num + 1;
        }
      }
      return ' ';
    }
  }
}

})();

(function () {
'use strict';
angular.module('dnsim').filter('escape', [function() {
  'use strict';

  function escapeFilter(input) {
      if(input) {
          return window.encodeURIComponent(input);
      }
      return '';
  }

  return escapeFilter;
}]);

})();
(function () {
'use strict';
angular.module('dnsim').filter('percentage', [function() {
  'use strict';

  function percentageFilter(input) {
    if(typeof input == 'number') {
      return (Math.round(input * 100 * 100) / 100) + '%';
    }
    else {
      return input;
    }
  }
  percentageFilter.$stateful = false;

  return percentageFilter;
}]);

})();
(function () {
'use strict';

angular.module('dnsim').directive('dngearsimBuildMenu', menu);

function menu() {
  return {
    restrict: 'E',
    scope: false,
    bindToController: {
    },
    templateUrl: 'ui/menus/build-menu.html',
    controllerAs: 'ctrl',
    controller: ['region','jobs', menuController],
  };
}

function menuController(region, jobs) {
  
  var vm = this;
  
  vm.getRegion = function() {
    if(region.dntLocation) {
      return region.dntLocation.region;
    }
  }
  
  vm.publishBuild = function() {
    
    var parts = window.location.href.replace('//', '::').split('/');
    if(parts && parts.length > 2 && region.dntLocation) {
        
      var jobName = parts[parts.length-2];
      var level = jobName.substr(jobName.length-2);
      jobName = jobName.substr(0, jobName.length-3, 2);
      window.location.href = "https://spacem.github.io/dnskillsim/publish?build="
        + parts[parts.length-1]
        + '&region='
        + region.dntLocation.region
        + '&job='+jobName
        + '&level='+level;
    }
  }
}

})();

(function () {
'use strict';

angular.module('dnsim').directive('dngearsimHomeMenu', menu);

function menu() {
  return {
    restrict: 'E',
    scope: false,
    bindToController: {
    },
    templateUrl: 'ui/menus/home-menu.html',
    controllerAs: 'ctrl',
    controller: menuController,
  };
}

function menuController() {

}

})();

(function () {
'use strict';

angular.module('dnsim').directive('dngearsimLegacyMenu', menu);

function menu() {
  return {
    restrict: 'E',
    scope: false,
    bindToController: {
    },
    templateUrl: 'ui/menus/legacy-menu.html',
    controllerAs: 'ctrl',
    controller: ['region', menuController],
  };
}

function menuController(region) {
  
  var vm = this;
  
  vm.getRegion = function() {
    if(region.dntLocation) {
      return region.dntLocation.region;
    }
  }
}

})();

angular.module('dnsim').controller('HeaderCtrl', 
[
  function() {
    'use strict';
    var vm = this;
  }
]).directive('dngearsimHeader', function() {
  return {
    templateUrl: 'ui/nav/header.html',
  };
});
(function () {
'use strict';
angular.module('dnsim').controller('BuildSearchCtrl', ['$routeParams','$location','$timeout','onlineService','jobs', 'region', buildSearch]);

function buildSearch($routeParams,$location,$timeout,onlineService,jobs,region) {
  'use strict';
  
  var vm = this;
  
  if($routeParams.region) {
    region.setLocationByName($routeParams.region);
  }
  
  vm.maxDisplay = 15;
  vm.totalNumResults = 0;
  
  jobs.init(null, function() {
    if($routeParams.jobId) {
      vm.job = jobs.getById($routeParams.jobId);
      getClassBuilds();
    } 
  })
  
  this.reloadBuilds = function() {
    vm.allResults = null;
    vm.jobBuilds = null;
    getClassBuilds();
  }
  
  this.setJob = function() {
    $timeout(function() {
      $location.search('jobId', vm.job.id);
    });
  }
  
  this.showMoreResults = function(extra) {
    vm.maxDisplay = vm.totalNumResults + extra;
    vm.totalNumResults = 0;
  }
  
  vm.allResults = null;
  vm.getFilteredBuilds = function() {
    
    // init
    if(vm.allResults == null) {
      vm.allResults = [];
      for(var uid in vm.jobBuilds) {
        for(var buildName in vm.jobBuilds[uid]) {
          if(vm.jobBuilds[uid][buildName] && vm.jobBuilds[uid][buildName].region) {
            var result = {
              uid: uid,
              name: buildName,
              data: vm.jobBuilds[uid][buildName]
            };
            
            if(result.data.about && result.data.about.length > 256) {
              result.data.about = result.data.about.substr(0, 256);
            }
            
            vm.allResults.push(result);
          }
        }
      }
    }
    
    var results = [];
    for(var i=0;i<vm.allResults.length;++i) {
      
      var result = vm.allResults[i];
      if(vm.filter && vm.filter.length > 0) {
        var f = vm.filter.toUpperCase();
        if(result.name.toUpperCase().indexOf(f) == -1) {
          if(!result.data.guild ||
             result.data.guild.toUpperCase().indexOf(f) == -1) {

            continue;
          }
        }
      }
      
      results.push(result);

      if(results.length >= vm.maxDisplay) {
        break;
      }
    }
    
    vm.totalNumResults = results.length;
    return results;
  }
  
  function getClassBuilds() {
    if(vm.job) {
      
      let levelLimit = null;
      if(!vm.includeOldBuilds) {
        levelLimit = 95;
      }
      
      onlineService.getClassBuilds(vm.job, levelLimit).then(function(builds) {
        if(builds) {
          // console.log('got builds', builds);
          vm.jobBuilds = builds;
        }
        else {
          // console.log('no builds');
          vm.jobBuilds = {};
        }
      });
    }
  }
}

})();
(function () {
'use strict';
angular.module('dnsim').controller('ProfileCtrl', ['$location', '$routeParams', 'onlineService','jobs', profile]);

function profile($location, $routeParams, onlineService, jobs) {
  'use strict';
  
  var vm = this;
  vm.uid = $routeParams.uid;
  
  jobs.init(function() {}, function() {});
  
  getSavedBuilds();
  getProfile();
  
  function getSavedBuilds() {
    onlineService.getUserBuilds(vm.uid).then(function(builds) {
      if(builds) {
        vm.storedBuilds = builds;
      }
      else {
        vm.storedBuilds = {};
      }
    }).catch(function(err) {
      vm.storedBuilds = {};
    });
  }
  
  function getProfile() {
    onlineService.getProfile(vm.uid).then(function(profile) {
      if(profile) {
        vm.profile = profile;
      }
      else {
        vm.profile = {};
      }
    }).catch(function(err) {
      vm.profile = {};
    });
  }
  
  this.getJob = function(build) {
    if(build.job) {
      return jobs.getById(build.job);
    }
  }
  
  this.getBuildJobName = function(build) {
    var buildJob = jobs.getById(build.job);
    if(buildJob) {
      return buildJob.name;
    }
  }
  
  this.getBuildLink = function(build) {
    var buildJob = jobs.getById(build.job);
    if(buildJob) {
      var level = build.level;
      if(!level) {
        level = '93';
      }
      return 'https://dnskillsim.herokuapp.com/' + build.region + '/' + buildJob.d.EnglishName.toLowerCase() + '-' + level + '/' + build.build;
    }
  }
}

})();
(function () {
'use strict';
angular.module('dnsim').controller('PublishCtrl', ['$location', 'onlineService', '$routeParams', 'region', 'jobs', publish]);

function publish($location, onlineService, $routeParams, region, jobs) {
  'use strict';
  
  var vm = this;
  
  if($routeParams.region) {
    region.setLocationByName($routeParams.region);
  }
  
  vm.show = $routeParams.show;
  
  if($routeParams.build && $routeParams.job && $routeParams.region) {
    sessionStorage.setItem('current_skill_build', $routeParams.build);
    sessionStorage.setItem('current_skill_build_job', $routeParams.job);
    sessionStorage.setItem('current_skill_build_region', $routeParams.region);
    sessionStorage.setItem('current_skill_build_level', $routeParams.level);
    region.setLocationByName($routeParams.region);
    console.log('saved build from parameters');
  }
  
  onlineService.login().then(function(user) {
    getSavedBuilds();
    getProfile();
      
    jobs.init(function() {
      
    }, function() {
      getCurrentBuild();
    });
  });

  
  function getCurrentBuild() {
    
    var englishJobName = sessionStorage.getItem('current_skill_build_job');
    if(englishJobName) {
      var job = jobs.getByEnglishName(englishJobName.toUpperCase());
      if(job) {
        
        var user = vm.getUser();
        var buildName = 'player1';
        if(vm.profile && vm.profile.name) {
          buildName = vm.profile.name;
        }
        
        vm.build = {
          build: sessionStorage.getItem('current_skill_build'),
          job: job.id,
          region: sessionStorage.getItem('current_skill_build_region'),
          level: sessionStorage.getItem('current_skill_build_level'),
          name: buildName
        };
  
        if(!vm.build.build || !vm.build.job || !vm.build.region) {
          vm.build = null;
        }
      }
    }
    else {
      vm.build = null;
    }
  }
  
  function getSavedBuilds() {
    var user = vm.getUser();
    if(user) {
      onlineService.getUserBuilds(user.uid).then(function(builds) {
        if(builds) {
          vm.storedBuilds = builds;
        }
        else {
          vm.storedBuilds = {};
        }
      }).catch(function(err) {
        vm.storedBuilds = {};
      });
    }
  }
  
  function getProfile() {
    var user = vm.getUser();
    if(user) {
      onlineService.getProfile(user.uid).then(function(profile) {
        if(profile) {
          vm.profile = profile;
        }
        else {
          vm.profile = {};
        }
      });
    }
  }
  
  this.getJob = function(build) {
    if(build.job) {
      return jobs.getById(build.job);
    }
  }
  
  this.getBuildJobName = function(build) {
    var buildJob = jobs.getById(build.job);
    if(buildJob) {
      return buildJob.name;
    }
  }
  
  this.getBuildLink = function(build) {
    var buildJob = jobs.getById(build.job);
    if(buildJob) {
      var level = build.level;
      if(!level) {
        level = 93;
      }
      return 'https://dnskillsim.herokuapp.com/' + build.region + '/' + buildJob.d.EnglishName.toLowerCase() + '-' + level + '/' + build.build;
    }
  }
  
  this.saveProfile = function() {
    onlineService.saveProfile(vm.profile).then(getProfile).catch(handleError);
  }
  
  this.getUser = function() {
    return onlineService.getUser();
  }
  
  this.save = function() {
    vm.build.lastUpdate = (new Date()).getTime();
    onlineService.saveBuild(vm.build.name, vm.build).then(getSavedBuilds).catch(handleError);
    vm.publishBuild = null;
  }
  
  this.startPublish = function() {
    var buildName = vm.build.name;
    if(buildName in vm.storedBuilds) {
      if(!vm.build.about) {
        vm.build.about = vm.storedBuilds[buildName].about;
      }
      
      if(!vm.build.guild) {
        vm.build.guild = vm.storedBuilds[buildName].guild;
      }
    }
    
    vm.publishBuild = buildName;
  }
  
  function handleError(err) {
    console.log(err);
  }
  
  this.deleteAccount = function() {
    onlineService.deleteAccount(vm.storedBuilds);
  }
  
  this.getBuildLimit = function() {
    if(vm.profile && vm.profile.maxBuilds) {
      return vm.profile.maxBuilds;
    }
    else {
      return 25;
    }
  }
  
  this.getNumStoredBuilds = function() {
    return _.size(vm.storedBuilds);
  }
  
  this.getNumBuilds = function() {
    return _.size(vm.builds);
  }
  
  this.signOut = function() {
    onlineService.signOut();
  }
  
  vm.getAllBuildNames = function() {
    var allKeys = _.keys(vm.storedBuilds);
    return _.uniq(allKeys.sort(), true);
  }
  
  vm.deleteServer = function(buildName) {
    vm.serverToDelete = buildName;
  }
  
  vm.reallyDeleteServer = function(buildName) {
    onlineService.deleteBuild(buildName, vm.storedBuilds[buildName]).then(getSavedBuilds);
    vm.serverToDelete = null;
  }
  
}

})();
(function () {
'use strict';
angular.module('dnsim').controller('PublishedCtrl', ['onlineService', '$location', '$routeParams','jobs', published]);

function published(onlineService, $location, $routeParams, jobs) {
  'use strict';
  
  var vm = this;
  vm.uid = $routeParams.uid;
  vm.buildName = $routeParams.buildName;
  
  getBuild();
  getProfile();
  
  jobs.init(function() {}, function() {});
  
  vm.getBuildLink = function(build) {
    var buildJob = jobs.getById(build.job);
    if(build && buildJob) {
      var level = build.level;
      if(!level) {
        level = 93;
      }
      return 'https://dnskillsim.herokuapp.com/' + build.region + '/' + buildJob.d.EnglishName.toLowerCase() + '-' + level + '/' + build.build;
    }
  }
  
  
  vm.getJob = function(build) {
    if(build.job) {
      return jobs.getById(build.job);
    }
  }
  
  function getProfile() {
    onlineService.getProfile(vm.uid).then(function(profile) {
      if(profile) {
        vm.profile = profile;
      }
      else {
        vm.profile = {};
      }
    }).catch(function(err) {
      console.log('unable to load profile', err);
      vm.profile = {};
    });
  }
  
  function getBuild() {
    onlineService.getBuild(vm.uid, vm.buildName).then(function(build) {
      if(build) {
        vm.build = build;
      }
      else {
        vm.build = {};
      }
    });
  }
}

})();
angular.module('dnsim').controller('RegionCtrl', 
  ['$timeout','$location','region','$http',
  function($timeout,$location,region,$http) {
    'use strict';
    
    var vm = this;

    vm.override = region.getOverride();
    region.init();
      
    vm.region = region;
    vm.tHoverLocation = region.tlocation;
    vm.hoverLocation = region.dntLocation;
    vm.edit = (region.dntLocation == null);
    vm.dntVersion = '';
    setDntVersion();
    
    vm.toggleEdit = function() {
      vm.edit = !vm.edit;
      if(typeof history_push !== 'undefined') {
        window.setTimeout(history_push, 100);
      }
    }
    
    vm.setHoverLocation = function(hoverLocation) {
      vm.hoverLocation = hoverLocation;
      if(typeof history_push !== 'undefined') {
        window.setTimeout(history_push, 1);
      }
    }
    
    function setDntVersion() {
      // console.log('setting version for ', vm.region.dntLocation);
      if(vm.region.dntLocation && vm.region.dntLocation.url) {
        var url = vm.region.dntLocation.url + '/Version.cfg';
        $http({
          url: url,
          method: 'GET',
          transformResponse: undefined
        }).then(function(res) {
          if(res && res.data) {
            var newLineDetails = res.data.split('\r\n');
            if(newLineDetails.length) {
              var spaceDetails = newLineDetails[0].split(' ');
              if(spaceDetails.length > 1) {
                vm.dntVersion = 'v' + spaceDetails[1];
              }
            }
          }
        });
      }
    }
    
    vm.getDntLocation = function() {
      return region.dntLocation;
    };
    vm.getTlocation = function() {
      return region.tlocation;
    };
     
    vm.getHostedFiles = function() {
      // console.log('getting hosted files');
      return region.hostedFiles;
    };
    
    vm.setTLocation = function(location) {
      region.setTLocation(location);
      vm.edit = false;
    };
    
    vm.setLocation = function(location) {
      if(typeof history_push !== 'undefined') {
        history_push();
      }
      region.setLocation(location);
      vm.edit = false;
      setDntVersion();
    };

    vm.setOverride = function(value) {
      region.setOverride(value);
      vm.override = value;
      vm.edit = value;
    };
  }
])
.directive('dngearsimRegion', function() {
  return {
    templateUrl: 'ui/region/region.html',
    controllerAs: 'ctrl',
  };
});
(function () {
'use strict';
angular.module('dnsim').controller('SimCtrl', ['$location','$window','$timeout','region','$routeParams', create]);

function create($location, $window, $timeout, region, $routeParams) {
  'use strict';
  
  var vm = this;
  
}

})();
(function () {
'use strict';

angular.module('dnsim').directive('dnsimChooseClass', chooseClass);

function chooseClass() {
  return {
    restrict: 'E',
    scope: true,
    bindToController: {
      job: '=job',
      onSetJob: '&onSetJob'
    },
    templateUrl: 'ui/widgets/choose-class.html',
    controllerAs: 'ctrl',
    controller: [
      '$window','$location','$routeParams','$timeout','jobs', 
      chooseClassController],
  };
}

function chooseClassController($window,$location,$routeParams,$timeout,jobs) {
  console.log('choose class');
  this.getFinalJobs = function() {
    var allJobs = jobs.getFinalJobs();
    var finalJobs = [];
    for(var j=0;j<allJobs.length;++j) {
      if(jobs.getBaseJobName(allJobs[j]) == this.bJob) {
        finalJobs.push(allJobs[j]);
      }
    }
    return finalJobs;
  }
  
  this.getBaseJobs = function() {
    return jobs.getBaseJobs();
  }
  
  this.getJobName = function(englishName) {
    var allJobs = jobs.getAllJobs();
    for(var j=0;j<allJobs.length;++j) {
      if(allJobs[j].d.EnglishName == englishName) {
        return allJobs[j].name;
      }
    }
  }
  
  this.setJob = function(job) {
    this.job = job;
    if(job) {
      this.onSetJob();
    }
  }
  
  
  jobs.init(reportProgress, $timeout);
  function reportProgress(msg) {
    // console.log('progress: ' + msg);
  }

}

})();

(function () {
'use strict';

angular.module('dnsim').directive('dnsimJobIcon', [dnsimJobIcon]);

function dnsimJobIcon() {
  return {
    restrict: 'E',
    scope: {},
    bindToController: {
      item: '=item',
    },
    templateUrl: 'ui/widgets/dnsim-job-icon.html',
    controller: dnsimJobIconController,
    controllerAs: 'ctrl'
  }
}

function dnsimJobIconController() {

  this.getIconXPostion = function() {
    if(this.item && this.item.d && this.item.d.JobIcon > 0) {
      return ((this.item.d.JobIcon % 9) * 44) + 5;
    }
    return 0;
  }
  
  this.getIconYPostion = function() {
    if(this.item && this.item.d && this.item.d.JobIcon > 0) {
      return (Math.floor(this.item.d.JobIcon / 9) * 44) + 5;
    }
    return 0;
  }
}

})();

(function () {
'use strict';

angular.module('dnsim').directive('dnsimLoading', ['dntData','translations','$timeout', 'region', dnsimLoading]);

function dnsimLoading(dntData, translations, $timeout, region) {
  'use strict';
  return {
    restrict: 'E',
    transclude: true,
    scope: {
      alsoShowFor: '=alsoShowFor',
    },
    templateUrl: 'ui/widgets/dnsim-loading.html',
    link: function($scope, element, attrs) {
      $scope.$on('TRANSLATION_LOAD_EVENT', function() {
        $scope.setLoadCount();
      });
      
      $scope.$on('DNTDATA_LOAD_EVENT', function() {
        $scope.setLoadCount();
      });
      
      $scope.$on('DNTDATA_LOAD_ERROR', function() {
        $timeout(function() {
          $scope.loadError = true;
        });
      });
      
      $scope.$on('TRANSLATION_LOAD_ERROR', function() {
        $timeout(function() {
          $scope.loadError = true;
        });
      });

      $scope.numLoading = 0;
      $scope.setLoadCount = function() {
        $scope.noRegion = !region.dntLocation;
        
        var n = dntData.anyLoading();
        if(!translations.isLoaded())
        {
          n++;
        }
        
        $timeout(function() {
          if($scope.numLoading < n || !$scope.totalToLoad) {
            $scope.totalToLoad = n;
          }
          $scope.numLoading = n;
        });
      };
      
      $scope.loadError = false;
      $scope.setLoadCount();
    },
  };
}

})();
(function () {
'use strict';

angular.module('dnsim').config(['$routeProvider', config]);

function config($routeProvider) {

  $routeProvider.
    
    when('/create', {
      templateUrl: 'ui/build/create.html',
      controller: 'CreateCtrl as ctrl',
    }).
    when('/publish', {
      templateUrl: 'ui/online/publish.html',
      controller: 'PublishCtrl as ctrl',
    }).
    
    when('/profile/:uid?', {
      templateUrl: 'ui/online/profile.html',
      controller: 'ProfileCtrl as ctrl',
    }).
    
    when('/published', {
      templateUrl: 'ui/online/published.html',
      controller: 'PublishedCtrl as ctrl',
    }).
    
    when('/published/:uid/:buildName*', {
      templateUrl: 'ui/online/published.html',
      controller: 'PublishedCtrl as ctrl',
    }).
    
    when('/build-search/:jobId?', {
      templateUrl: 'ui/online/build-search.html',
      controller: 'BuildSearchCtrl as ctrl',
    }).
  
    when('/:region?', {
      templateUrl: 'ui/home/home.html'
    }).
    
    otherwise({
      redirectTo: '/'
    });
}

})();
//# sourceMappingURL=extras.min.js.map
