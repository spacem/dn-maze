{"version":3,"sources":["maze.js","skill.js","description.js","tech.js"],"names":[],"mappingsjanfile":"maze.min.js","sourcesContent":["function skillsim() {\n  // initialize all the images\n  $('.jobsprite').each(function() {\n    this.style.backgroundImage = \"url('\" + urls.mainbar + \"/\" + $TIMESTAMP + \"jobicon_pvp.png')\";\n  });\n\n  // is async, don't care when we get it\n  $.getJSON(urls.job, function(data) {\n    db = data;\n\n    // have it stay a little\n    dskills.each(function() {\n      this.setAttribute('data-desc', 'hover');\n      init_description(this);\n    });\n  });\n\n  dskills.each(function() {\n    var dom = $(this);\n    var skillID = this.getAttribute('data-skill');\n    var lvl = Job.Cache[skillID];\n    var grayed = lvl[0] == 0 ? '_b' : '';\n    var sprite = Job.Sprites[skillID];\n    var techs = get_tech_count(skillID);\n    sprite[1] *= -50;\n    sprite[2] *= -50;\n\n    this.style.background = \"url('\"+ urls.mainbar  +\"/\" + $TIMESTAMP + \"skillicon\" + sprite[0] + grayed + \".png') \" + sprite[1] + \"px \" + sprite[2] + \"px\"; // initial setup\n    this.getElementsByClassName('skill-bdr')[0].style.background = \"url('\" + urls.border + \"') 100px 0\";\n\n\n    dom.find('.skill-lvl').text([lvl[0] + techs, lvl[3]].join('/'));\n    dom.on('mousedown', skill_adj);\n  });\n\n  $('.panel-body').on('contextmenu', prevent_default);\n\n  // level selection\n  for (var level = Job.Levels.length; level > 0; level--) {\n    $('#level').append(tag('option', null, format(lang.level.option, level)).val(level));\n  }\n  $('#level').val(Job.MaxLevel);\n\n  // the apply type\n  $('#pvp').click(reverse('#pve', function() {\n                    set_cookie(\"apply_type\", 1);\n                    Job.ApplyType = 1;\n                    if ($dpop.persist) {\n                      $dpop.update($dpop.persist[0], $dpop.persist);\n                    }\n                    return !0;\n                  }));\n  $('#pve').click(reverse('#pvp', function() {\n                    set_cookie(\"apply_type\", 0);\n                    Job.ApplyType = 0;\n                    if ($dpop.persist) {\n                      $dpop.update($dpop.persist[0], $dpop.persist);\n                    }\n                    return !0;\n                  }));\n\n  // the strictness\n  $('#free').click(reverse('#strict', function() {\n                     set_cookie('free', 1);\n                     return Job.Free = true;\n                   }));\n  $('#strict').click(reverse('#free', strict_switch));\n\n  var search = 0;\n  $('#s').val('').on('input', function() {\n    ++search;\n    var search_set = search;\n\n    var str = $('#s').val();\n\n    setTimeout(function() {\n      if (search != search_set) {\n        return;\n      }\n\n      search = 0; // reset it\n\n      var re;\n      try {\n        re = new RegExp(str, 'im');\n      } catch (x) {\n        return;\n      }\n\n      dskills.each(function() {\n        var dom = $(this);\n        if (str.length > 2) {\n          update_description(this, dom);\n          var opts = dom.data('bs.popover').options;\n\n          // check title\n          var text = opts.title.text();\n          if (re.test(text)) {\n            this.style.opacity = 1;\n            return;\n          }\n\n          text = opts.content.clone();\n          text.find('.hidden').remove();\n          this.style.opacity = re.test(text.text()) ? 1 : .33;\n        } else {\n          this.style.opacity = 1;\n        }\n      });\n    }, 500); // .5s delay\n  });\n\n  $('#level').change(function() {\n    var val = num($(this).val());\n    $('#level-btn').text(val <= Job.MaxLevel ? lang.level.reset : lang.level.raise);\n  });\n\n  $('#level-btn').mousedown(function() {\n    var level = num($('#level').val());\n    dskills.each(function() {\n      var dom = $(this);\n      var skillID = this.getAttribute('data-skill');\n      var skill = db.Skills[skillID];\n      var lvl = Job.Cache[skillID];\n\n      // update skill lvl\n      if (level <= Job.MaxLevel) {\n        Job.Techs = {};\n        lvl[0] = db.Skills[skillID].LevelLimit[0] == 1 ? 1 : 0;\n        lvl[2] = 0;\n        techs = 0;\n      }\n\n      if (level != Job.MaxLevel) {\n        // calculate new max SP\n        var newMax = 0;\n        var absMax = skill.MaxLevel - skill.SPMaxLevel;\n        for (var i = absMax, j = 1; i > 0; i--, j++) {\n          if (skill.LevelLimit[i-1] <= level) {\n            newMax = i;\n            break;\n          }\n\n          if (skill.LevelLimit[j-1] <= level) {\n            newMax = j;\n          } else {\n            break;\n          }\n        }\n\n        lvl[1] = Math.min(newMax, absMax);\n      }\n\n      update_skill_icon(skillID, dom);\n    });\n\n    // update panels\n    refresh_sp(get_max_sp(level), level <= Job.MaxLevel);\n\n    // other caches to reset\n    if (level <= Job.MaxLevel) {\n      Job.TSP = [0,0,0];\n      Job.SkillGroups = {};\n      Job.BaseSkills = {};\n    }\n    Job.MaxLevel = level;\n\n    update_progress();\n    $(this).text(lang.level.reset);\n\n    history_push();\n  });\n\n  $('#techs').click(techniques)\n}\n\nfunction update_progress() {\n  var total_sp = get_total_sp();\n  var max_sp = get_max_sp();\n  var percent = (total_sp/max_sp) * 100;\n  $('#max-progress').text(format(lang.progress.max, max_sp));\n  $('#progress').css('width', percent + '%');\n  $('#rem-progress').text(format(lang.progress.remaining, max_sp - total_sp));\n  $('#curr-progress').text(format(lang.progress.curr, total_sp));\n}\n\nfunction set_opacity(dom, o) {\n  if (o < 0 || o > 1) {\n    return -1;\n  }\n\n  dom.css(\"opacity\", o);\n  return o;\n};\n\nfunction prevent_default(e) {\n  e.preventDefault();\n}\n\nfunction num(v) {\n  return parseInt(v);\n}\n\nfunction sum(p, c) {\n  return p+c;\n}\n\nfunction get_total_sp() {\n  return Job.TSP.reduce(sum);\n}\n\nfunction get_max_sp(level) {\n  return Job.Levels.slice(0, level || Job.MaxLevel).reduce(sum);\n}\n\nfunction tag(t, cls, text) {\n  return $(document.createElement(t))\n                   .addClass(cls)\n                   .text(text);\n}\n\nvar ON = 'btn-primary', OFF = 'btn-default';\nfunction reverse(rev, handler) {\n  return function() {\n    if (handler() === false) {\n      return;\n    }\n    $(rev).removeClass(ON).addClass(OFF);\n    $(this).addClass(ON);\n    history_push();\n  };\n}\n\nfunction strict_checker(setFree) {\n  var modal = $('#modal');\n  var title = $('#modal-title');\n  var body = $('#modal-body');\n  var changeable = true;\n  var warnings = [];\n\n  dskills.each(function() {\n    var skillID = num(this.getAttribute('data-skill'));\n    var lvl = Job.Cache[skillID];\n    var skill = db.Skills[skillID];\n\n    // make sure needsp is fine\n    if (lvl[0] > 0) {\n      if (!check_skill_reqs_state(skillID, skill, warnings)) {\n        changeable = false;\n        return;\n      }\n\n      if (!check_skill_groups(skillID, skill, warnings)) {\n        changeable = false;\n        return;\n      }\n    }\n  });\n\n  if (changeable && setFree) {\n    Job.Free = false;\n    set_cookie('free', 0);\n  } else {\n    title.text(lang.strict_title);\n    body.empty().append(warnings.map(function(v) {\n                          return tag('p', null, v);\n                        }));\n  }\n\n  return changeable;\n}\n\nfunction strict_switch() {\n  if (!strict_checker(true)) {\n    $('#modal').modal('show');\n    return false;\n  }\n  return true;\n}\n\nvar build_chars = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_'.split('');\nfunction history_push() {\n  \n  if(typeof dskills === 'undefined') {\n    return;\n  }\n\n  var build_path = [];\n  dskills.each(function() {\n    var skillID = this.getAttribute('data-skill');\n    var pos = Job.Sprites[skillID][3];\n    var lvl = Job.Cache[skillID];\n    var maybeMinus1 = db.Skills[skillID].LevelLimit[1-1] == 1 ? 1 : 0;\n    var b = [build_chars[lvl[0] - maybeMinus1]];\n    var techs = get_tech_count(skillID);\n    if (techs > 0) {\n      if (Job.Techs.Crest == skillID) {\n        b.push('.');\n      }\n\n      if (Job.Techs.Weapon == skillID) {\n        b.push(\"'\");\n      }\n\n      ['Necklace', 'Earring', 'Ring1', 'Ring2'].forEach(function(key) {\n        if (Job.Techs[key] == skillID) {\n          b.push('!');\n        }\n      });\n\n    }\n    b.push();\n    build_path[pos] = b;\n  });\n\n  var full_build_path = [];\n  for (var i = 0; i < build_path.length; i++) {\n    if (build_path[i] === undefined) {\n      full_build_path.push('-');\n    } else {\n      full_build_path = full_build_path.concat(build_path[i]);\n    }\n  }\n\n  history.pushState(Job, null, '/' + dnskillsim_region + '/' + Job.EnglishName + '-' + Job.MaxLevel + '/' + full_build_path.join(''));\n}\n\nfunction refresh_sp(max_sp, reset) {\n  // job sp\n  $('.panel').each(function(jobNum) {\n    var spdom = $(this).find('.panel-heading').find('span');\n    var sp = spdom.text().split('/').map(num);\n    var sp_ratio = Job.SP[jobNum];\n    sp[1] = num(max_sp * sp_ratio);\n\n    if (reset) {\n      sp[0] = 0;\n    } else {\n      sp[0] = Job.TSP[jobNum];\n    }\n\n    spdom.text(sp.join('/'));\n  });\n\n  update_progress();\n\n  $('#level').val(Job.MaxLevel);\n}\n\nwindow.addEventListener('popstate', function(e) {\n  oldJob = e.state || jQuery.extend(!0, {}, $Job);\n  oldJob.ApplyType = Job.ApplyType;\n  oldJob.Free = Job.Free;\n  Job = oldJob;\n\n  dskills.each(function() {\n    var dom = $(this);\n    var skillID = this.getAttribute('data-skill');\n\n    // update indivdual skills\n    update_skill_icon(skillID, dom);\n  });\n\n  refresh_sp(get_max_sp(), false);\n\n  $('#level').val(Job.MaxLevel);\n\n  var a = '#pvp', b = '#pve';\n  if (Job.ApplyType) {\n    a = '#pve', b = '#pvp';\n  }\n  $(a).removeClass(ON).addClass(OFF);\n  $(b).addClass(ON);\n\n  a = '#free', b = '#strict';\n  if (Job.Free) {\n    a = '#strict', b = '#free';\n  }\n  $(a).removeClass(ON).addClass(OFF);\n  $(b).addClass(ON);\n\n  if ($dpop.persist) {\n    $dpop.update($dpop.persist[0], $dpop.persist);\n  }\n});\n\nfunction set_cookie(name, value) {\n    var d = new Date();\n    d.setTime(d.getTime() + (356*24*60*60*1000));\n    document.cookie = name + \"=\" + value + \"; path=/; expires=\" + d.toUTCString();\n}\n\nfunction format(str) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  var s = '';\n  var len = str.length;\n  var idx = 0;\n  for (var i = 0; i < len; i++) {\n    var c1 = str[i], c2 = str[i + 1];\n    if (c1 == '?') {\n      if (c2 == '?') {\n        ++i;\n        s += '?';\n      } else {\n        if (args[idx] === undefined) {\n          s += \"\";\n        } else {\n          s += args[idx];\n        }\n        idx++;\n      }\n    } else {\n      s += c1;\n    }\n  }\n  return s;\n}\n","function skill_adj(e) {\n  if (e.altKey) {\n    return; // don't do anything\n  }\n\n  var dom = $(this);\n  var skillID = num(this.getAttribute('data-skill')); // indexOf is strict\n  var max = e.shiftKey || e.ctrlKey;\n  var lvl = [].concat(Job.Cache[skillID]); // clone it\n  var skill = db.Skills[skillID];\n  var techs = get_tech_count(skillID);\n\n  var prev = lvl[0];\n  if (e.button == 0) { // left click\n    lvl[0] = Math.min(lvl[1], max ? lvl[1] : lvl[0] + 1);\n  } else if (e.button == 2) { // right click\n    lvl[0] = Math.max(0, max ? 0 : lvl[0] - 1);\n    if (skill.LevelLimit[1-1] == 1 && lvl[0] == 0) { // default case\n      lvl[0] = 1;\n    }\n  }\n\n  var panel = dom.closest('.panel');\n  var spdom = panel.find('.panel-heading').find('span'); // do something later\n  var sp = spdom.text().split('/').map(num);\n  var jobNum = num(panel.data('job'));\n\n  // find SP difference\n  var diff = 0, end = Math.max(prev, lvl[0]), inc = prev < lvl[0], totalSP = get_total_sp(), maxSP = get_max_sp();\n  if (inc) {\n    for (var i = prev + 1; i <= lvl[0]; i++) {\n      var s = skill.SkillPoint[i-1];\n      if (sp[0] + diff + s > sp[1] || totalSP + diff + s > maxSP) {\n        lvl[0] = i - 1;\n        break;\n      }\n\n      diff += s;\n    }\n  } else {\n    for (var i = prev; i > lvl[0]; i--) {\n      var s = skill.SkillPoint[i-1];\n      diff -= s;\n      if (!Job.Free && !can_reduce_skill(skillID, skill, i - 1, jobNum, Job.TSP[jobNum] + diff)) {\n        lvl[0] = i;\n        diff += s;\n        break;\n      }\n    }\n  }\n\n  if (prev == lvl[0] || lvl[0] + techs > skill.MaxLevel) {\n    return; // do nothing\n  }\n\n  if (!Job.Free) {\n    if (lvl[0] > prev) { // skill reduction\n      if (!check_skill_reqs(skillID, skill)) {\n        return;\n      }\n\n      if (!check_skill_groups(skillID, skill)) {\n        return;\n      }\n    }\n  }\n\n  if (lvl[0] == 0 && techs > 0) {\n    for (var tech in Job.Techs) {\n      if (Job.Techs[tech] == skillID) {\n        delete Job.Techs[tech];\n      }\n    }\n    techs = 0;\n  }\n\n  // add skillgroup\n  if (skill.SkillGroup) {\n    var g = skill.SkillGroup;\n    if (!Job.SkillGroups[g]) { // nothing exists\n      Job.SkillGroups[g] = [];\n    }\n\n    var group = Job.SkillGroups[g];\n    if (lvl[0] && group.indexOf(skillID) == -1) {\n      group.push(skillID);\n    } else if (!lvl[0] && group.indexOf(skillID) != -1) {\n      Job.SkillGroups[g] = group.filter(function($skillID) { return $skillID != skillID });\n    }\n  }\n\n  if (skill.BaseSkillID) {\n    var b = skill.BaseSkillID;\n    if (! Job.BaseSkills[b]) {\n      Job.BaseSkills[b] = [];\n    }\n    var base = Job.BaseSkills[b];\n    if (lvl[0] && base.indexOf(skillID) == -1) {\n      base.push(skillID);\n    } else if (!lvl[0] && base.indexOf(skillID) != -1) {\n      Job.BaseSkills[b] = base.filter(function($skillID) { return $skillID != skillID });\n    }\n  }\n\n  // SP adjustment\n  sp[0] += diff;\n  lvl[2] += diff;\n  totalSP += diff;\n  Job.TSP[jobNum] += diff;\n\n  // panel update\n  spdom.text(sp.join('/'));\n\n\n  // icon update\n  Job.Cache[skillID] = lvl;\n  update_skill_icon(skillID, dom, techs);\n\n  // hooks\n  update_progress();\n  $dpop.update(this, dom);\n  history_push();\n}\n\nfunction update_skill_icon(skillID, dom, techs) {\n  if (techs === undefined) {\n    techs = get_tech_count(skillID);\n  }\n\n  var lvl = Job.Cache[skillID];\n  var thiz = dom[0];\n  var image = thiz.style.backgroundImage.replace('_b.png', '.png');\n\n  thiz.style.backgroundImage = lvl[0] ? image : image.replace('.png', '_b.png');\n\n  dom.find('.skill-bdr')\n     .removeClass('g')\n     .addClass(lvl[0] ? null : 'g');\n\n  dom.find('.skill-lvl')\n     .removeClass('g b')\n     .text([lvl[0] + techs, lvl[3]].join('/'))\n     .addClass(techs == 1 ? 'g' : (techs == 2 ? 'b' : null));\n\n}\n\n\nfunction level_satisfied(skillID, level) {\n  var lvl = Job.Cache[skillID];\n  return lvl[0] >= level;\n}\n\nfunction check_skill_reqs(skillID, skill) {\n  // check if sp total is satisfied\n  if (skill.NeedSP) {\n    for (var i = 0; i < 3; i++) {\n      if (Job.TSP[i] < skill.NeedSP[i]) {\n        return false;\n      }\n    }\n  }\n\n  // make sure parent skill is fine\n  if (skill.ParentSkills) {\n    if (skill.SkillGroup == 1 && Job.SkillGroups[1] && Job.SkillGroups[1].length) {\n      if (!check_ult_reqs()) {\n        return false;\n      }\n    } else {\n      for (var $skillID in skill.ParentSkills) {\n        if (! level_satisfied($skillID, skill.ParentSkills[$skillID])) {\n          return false;\n        }\n      }\n    }\n  }\n\n  var base = Job.BaseSkills[skill.BaseSkillID];\n  if (base && base.indexOf(skillID) == -1 && base.length) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction check_ult_reqs() {\n  var atleastone = false;\n  if (Job.SkillGroups[1]) {\n    Job.SkillGroups[1].forEach(function(skillID) {\n      var skill = db.Skills[skillID];\n      var one = true;\n      for (var $skillID in skill.ParentSkills) {\n        one &= level_satisfied($skillID, skill.ParentSkills[$skillID]);\n      }\n\n      atleastone |= one;\n    });\n  }\n\n  return atleastone;\n}\n\nfunction check_skill_reqs_state(skillID, skill, warnings) {\n  // check if sp total is satisfied\n  if (skill.NeedSP) {\n    for (var i = 0; i < 3; i++) {\n      if (Job.TSP[i] < skill.NeedSP[i]) {\n        if (warnings) {\n          warnings.push(format(lang.warnings.tsp, db.Lookup[skill.NameID], Job.Names[i], skill.NeedSP[i]));\n        }\n        return false;\n      }\n    }\n  }\n\n  // make sure parent skill is fine\n  if (skill.SkillGroup != 1 && skill.ParentSkills) { // doesn't matter for ults\n    for (var $skillID in skill.ParentSkills) {\n      if (! level_satisfied($skillID, skill.ParentSkills[$skillID])) {\n        if(warnings) {\n          warnings.push(format(lang.warnings.parent, db.Lookup[skill.NameID], db.Lookup[db.Skills[$skillID].NameID], skill.ParentSkills[$skillID]));\n        }\n\n        return false;\n      }\n    }\n  }\n\n  var base = Job.BaseSkills[skill.BaseSkillID];\n  if (base && base.indexOf(skillID) != -1 && base.length > 1) {\n    if (warnings) {\n      base.forEach(function($skillID) {\n        if ($skillID != skillID) {\n          warnings.push(format(lang.warnings.base, db.Lookup[skill.NameID], db.Lookup[db.Skills[$skillID].NameID]));\n        }\n      });\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\n// check skill group\nfunction check_skill_groups(skillID, skill, warnings) {\n  if (skill.SkillGroup) {\n    var group = Job.SkillGroups[skill.SkillGroup];\n    if (skill.SkillGroup == 1 && group && group.length) { // ultimate\n      if (warnings) { // hate doing this kinda stuff, but :/\n        if (!check_ult_reqs()) {\n          group.forEach(function($skillID) {\n            var $skill = db.Skills[$skillID];\n            for (var $$skillID in $skill.ParentSkills) {\n              if (! level_satisfied($$skillID, $skill.ParentSkills[$$skillID])) {\n                var fmt = format(lang.warnings.parent, db.Lookup[$skill.NameID], db.Lookup[db.Skills[$$skillID].NameID], $skill.ParentSkills[$$skillID]);\n                if (warnings.indexOf(fmt) == -1) {\n                  warnings.push(fmt);\n                }\n\n                return;\n              }\n            }\n          });\n          return false;\n        }\n      }\n    } else if (group && group.length) {\n      var found = group.indexOf(skillID) != -1;\n      if (warnings && group.length > 1 && found) {\n        group.forEach(function($skillID) {\n          if ($skillID != skillID) {\n            warnings.push(format(lang.warnings.group, db.Lookup[skill.NameID], db.Lookup[db.Skills[$skillID].NameID]));\n          }\n        });\n      }\n      return group.length == 1 && found;\n    }\n  }\n\n  return true;\n}\n\nfunction can_reduce_skill(skillID, skill, newLevel, jobNum, newJobSP) {\n  for (var $skillID in db.Skills) {\n    if ($skillID == skillID) {\n      continue;\n    }\n\n    var $skill = db.Skills[$skillID];\n    var lvl = Job.Cache[$skillID];\n\n    // will this create an SP violation to any other skill?\n    if ($skill.NeedSP) {\n      if (lvl[0] && newJobSP < $skill.NeedSP[jobNum]) {\n        return false;\n      }\n    }\n\n    if (skill.SkillGroup == 1 && $skill.SkillGroup == 1 && lvl[0] > 0 && !newLevel) {\n      var group = Job.SkillGroups[1];\n      for (var $$skillID in $skill.ParentSkills) {\n        if (!level_satisfied($$skillID, $skill.ParentSkills[$$skillID])) {\n          return false;\n        }\n      }\n    } else {\n      // is this skill a parent of any other valid skill?\n      if ($skill.ParentSkills && $skill.ParentSkills[skillID]) {\n        if (lvl[0] && newLevel < $skill.ParentSkills[skillID]) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}","var $body = $('body');\nvar $lang = lang.description;\nfunction popover_placement(popover, td) {\n  var parent = $(td).parent();\n  var childen = parent.parent().children();\n  if(childen.length <= 2) {\n    return 'left';\n  }\n  var index = childen.index(parent);\n  if(index >= 2) {\n    return 'left';\n  }\n  else {\n    return 'right';\n  }\n}\nfunction init_description(thiz) {\n  $(thiz).popover({animation: false,\n                   html: true,\n                   trigger: 'manual',\n                   placement: popover_placement,\n                   container: $body})\n         .on('mouseenter', $dpop.mouseenter)\n         .on('mouseleave', $dpop.mouseleave)\n         .on('mousedown', $dpop.mousedown);\n}\n\nfunction update_description(thiz, dom) {\n  var skillID = thiz.getAttribute('data-skill');\n  var lvl = Job.Cache[skillID];\n  var skill = db.Skills[skillID];\n  var opts = dom.data('bs.popover').options;\n  opts.title = tag('span', Job.ApplyType ? 's' :null, format($lang.name[Job.ApplyType], db.Lookup[skill.NameID]));\n  var d = opts.content ? opts.content : desc_fields.clone(true);\n  var techs = get_tech_count(skillID), tech_append = \"\";\n  if (techs > 0) {\n    tech_append = \" +\" + techs;\n  }\n\n  // non-level related fields - no conditions\n  d.find('.dlvl').find('span:last').text(Math.max(1, lvl[0]) + tech_append);\n  d.find('.dlimit').find('span:last').text(lvl[3]);\n  if (lvl[2]) {\n    d.find('.dtsp').show().removeClass('hidden').find('span:last').text(lvl[2]);\n  } else {\n    d.find('.dtsp').hide().addClass('hidden');\n  }\n\n  // non-level related fields - with conditions\n  if (skill.NeedWeaponType) {\n    d.find('.dweaps')\n     .find('span:last')\n     .text(skill.NeedWeaponType.map($d.weapon).join(', '));\n  } else {\n    d.find('.dweaps').remove();\n  }\n\n  var skillType = $lang.type.passive;\n  switch(skill.SkillType) {\n    case 0: switch(skill.DurationType) {\n      case 0: skillType = $lang.type.instant; break;\n      case 1: skillType = $lang.type.buff; break;\n      case 2: skillType = $lang.type.debuff; break;\n    }\n    break;\n    case 3: skillType = $lang.type.ex; break;\n  }\n  d.find('.dtype').find('span:last').text(skillType);\n\n\n  var ele = $lang.element.none;\n  switch(skill.Element) {\n    case 0: ele = $lang.element.fire; break;\n    case 1: ele = $lang.element.water; break;\n    case 2: ele = $lang.element.light; break;\n    case 3: ele = $lang.element.dark; break;\n  }\n  d.find('.dele').find('span:last').text(ele);\n\n\n  // level related fields\n  var curr = lvl[0] + techs;\n  var nextLevelLimit = skill.LevelLimit[curr-1];\n  var nextSkillPoint = skill.SkillPoint[curr];\n\n  var curDecreaseSP = skill.DecreaseSP[Job.ApplyType][curr-1];\n  var nextDecreaseSP = skill.DecreaseSP[Job.ApplyType][curr];\n\n  var curDelayTime = skill.DelayTime[Job.ApplyType][curr-1];\n  var nextDelayTime = skill.DelayTime[Job.ApplyType][curr];\n\n  var curSkillExplanationID = skill.SkillExplanationID[Job.ApplyType][curr-1];\n  var nextSkillExplanationID = skill.SkillExplanationID[Job.ApplyType][curr];\n\n  var curSkillExplanationIDParam = skill.SkillExplanationIDParam[Job.ApplyType][curr-1];\n  var nextSkillExplanationIDParam = skill.SkillExplanationIDParam[Job.ApplyType][curr];\n\n  // level up req stuff\n  if (nextLevelLimit) {\n    d.find('.dreq').show().removeClass('hidden');\n    d.find('.dreqlvl')\n     .find('span:last')\n     .removeClass('r')\n     .addClass(Job.MaxLevel < nextLevelLimit ? 'r' : null)\n     .text(nextLevelLimit);\n\n    // sp by job req\n    if (skill.NeedSP) {\n      d.find('.dreqtsp')\n       .empty()\n       .append(skill.NeedSP.map($d.sp));\n    } else {\n      d.find('.dreqtsp').remove();\n    }\n\n    // skill level req\n    if (skill.ParentSkills) {\n      var arr = [];\n      for (var $skillID in skill.ParentSkills) {\n        var reqlvl = skill.ParentSkills[$skillID]\n        var $lvl = Job.Cache[$skillID];\n        arr.push(tag('div',\n                     $lvl[0] < reqlvl ? 'r' : null,\n                     format($lang.req.parent, db.Lookup[db.Skills[$skillID].NameID], reqlvl)));\n      }\n      d.find('.dreqskills')\n       .empty()\n       .append(arr);\n    } else {\n      d.find('.dreqskills').remove();\n    }\n\n\n    // stuff that shouldn't show when unnecessary\n    var jobNum = dom.closest('.panel').data('job');\n    var maxSP = get_max_sp();\n    var jobSP = Job.TSP[jobNum];\n    var totalSP = get_total_sp();\n\n    d.find('.dreqsp')\n     .find('span:last')\n     .text(nextSkillPoint)\n     .removeClass('r')\n     .addClass((jobSP + nextSkillPoint > maxSP*Job.SP[jobNum] ||\n                totalSP + nextSkillPoint > maxSP) ? 'r' : null);\n  } else {\n    d.find('.dreq').hide().addClass('hidden');\n  }\n\n  // apply type specific\n  var decreaseSP = curDecreaseSP ? curDecreaseSP : nextDecreaseSP;\n  if (decreaseSP) {\n    d.find('.dmp')\n     .removeClass('hidden')\n     .show()\n     .find('span:last')\n     .text(decreaseSP);\n  } else {\n    d.find('.dmp').hide().addClass('hidden');\n  }\n\n  var delayTime = (curDelayTime ? curDelayTime : nextDelayTime) / 1000;\n  if (delayTime) {\n    d.find('.dcd')\n     .removeClass('hidden')\n     .show()\n     .find('span:last')\n     .text(format($lang.cd,  delayTime));\n  } else {\n    d.find('.dcd').hide().addClass('hidden');\n  }\n\n\n  // descriptions\n  var explID = curSkillExplanationID ? curSkillExplanationID : nextSkillExplanationID;\n  var explParams = curSkillExplanationIDParam ? curSkillExplanationIDParam : nextSkillExplanationIDParam;\n  d.find('.dnowv').html(desc_format(db.Lookup[explID], explParams));\n  if (curr == 0 || curr == skill.MaxLevel) { // level 0/maxed; no next, but show next/now\n    d.find('.dnext').hide().addClass('hidden');\n    d.find('.dnextdiv').hide();\n  } else {\n    d.find('.dnextdiv').show();\n    d.find('.dnext').show().removeClass('hidden');\n    d.find('.dnextv').html(desc_format(db.Lookup[nextSkillExplanationID],\n                                       nextSkillExplanationIDParam));\n  }\n\n  opts.content = d;\n}\n\nfunction desc_tag(cls, field) {\n  return tag('div', cls).append(tag('span', 'o', field + ': '), tag('span'));\n}\n\nvar $d = {\n  params: function(p) {\n    if (p[0] == '{') {\n      return db.Lookup[p.substring(1, p.length - 1)];\n    } else {\n      return p;\n    }\n  },\n  weapon: function(w) {\n    return db.Weapons[w];\n  },\n  sp: function(sp,i) {\n    if (sp > 0) {\n      return tag('span',\n                 Job.TSP[i] < sp ? 'r' : null,\n                 format($lang.req.tsp, Job.Names[i], sp));\n    } else {\n      return null;\n    }\n  }\n};\n\nvar $dpop = {\n  persist: null,\n  mouseenter: function () {\n    var dom = $(this), trigger = dom.data('desc');\n    if (trigger == 'hover' && !$dpop.persist) {\n      update_description(this, dom);\n      dom.popover('show');\n    }\n  },\n  mouseleave: function() {\n    var dom = $(this), trigger = dom.data('desc');\n    if (trigger == 'hover') {\n      dom.popover('hide');\n    }\n  },\n  mousedown: function(e) {\n    if (e.button == 1) {\n      prevent_default(e);\n      var dom = $(this), trigger = dom.data('desc');\n      $dpop.update(this, dom);\n      if (trigger == 'hover') {\n        dom.data('desc', 'mclick');\n        $dpop.persist = dom;\n      } else {\n        dom.data('desc', 'hover');\n        $dpop.persist = null;\n      }\n    }\n  },\n  update: function(thiz, dom) {\n    if ($dpop.persist && $dpop.persist.data('skill') != dom.data('skill')) {\n      $dpop.persist.data('desc', 'hover').popover('hide');\n      $dpop.persist = null;\n    }\n\n    dom.popover('hide');\n    update_description(thiz, dom);\n    dom.popover('show');\n  }\n};\n\n\nfunction desc_format(str, params) {\n  if (!str) return str;\n\n  if(params) {\n    params = params.split(',').map($d.params);\n  \n    for (var i = 0; i < params.length; i++) {\n      str = str.replace('{' + i + '}', params[i]);\n    }\n  }\n\n  var c = 0, w = 0, p = 0, newStr = \"\", startPos = 0;\n  for (var i = 0; i < str.length - 1; i++) {\n    switch (str.substr(i, 2)) {\n      case \"#y\": case \"#p\": case \"#r\": case \"#s\": case \"#v\":\n      if (c - w == 1) { // needed a closing </span>\n        newStr += str.substring(startPos, i) + \"</span><span class=\\\"\" + str.substr(i+1,1) + \"\\\">\";\n      } else {\n        newStr += str.substring(startPos, i) + \"<span class=\\\"\" + str.substr(i+1,1) + \"\\\">\";\n        c++;\n      }\n\n      startPos = i + 2;\n      ++i;\n      break;\n      case \"#w\":\n      if (w == c) { // early #w\n        newStr +=  str.substring(startPos, i);\n      } else {\n        newStr += str.substring(startPos, i) + \"</span>\";\n        w++;\n      }\n\n      startPos = i + 2;\n      ++i;\n      default:\n      break;\n    }\n  }\n\n  newStr = newStr + str.substr(startPos);\n\n  if (c != w) {\n    newStr = newStr + \"</span>\";\n  }\n\n  return newStr.replace(/\\\\n/g, \"<br />\");\n}\n\n\nvar desc_fields = tag('div').append(\n  desc_tag('dlvl', $lang.fields.lvl),\n  desc_tag('dmp', $lang.fields.mp),\n  desc_tag('dweaps', $lang.fields.weap),\n  desc_tag('dtype', $lang.fields.type),\n  desc_tag('dele', $lang.fields.element),\n  desc_tag('dcd', $lang.fields.cd),\n  desc_tag('dlimit', $lang.fields.limit),\n  desc_tag('dtsp', $lang.fields.tsp),\n  tag('div', 'divider dreq'),\n  tag('div', 'dreq o', $lang.req.lvl_up),\n  tag('div', 'dreq dreqlvl').append(\n    tag('span', null, $lang.req.char_lvl),\n    tag('span')\n  ),\n  tag('div', 'dreq dreqskills'),\n  tag('div', 'dreq dreqtsp'),\n  tag('div', 'dreq dreqsp').append(\n    tag('span', null, $lang.req.sp),\n    tag('span')\n  ),\n  tag('div', 'dnow').append(\n    tag('div', 'dnowf o', $lang.curr),\n    tag('div', 'dnowv')\n  ),\n  tag('div', 'divider dnextdiv'),\n  tag('div', 'dnext').append(\n    tag('div', 'dnextf o', $lang.next),\n    tag('div', 'dnextv')\n  )\n);\n","var techHTML;\nfunction techniques() {\n  var modal = $('#modal');\n  var title = $('#modal-title');\n  var body = $('#modal-body');\n\n  title.text(\"Techniques\");\n  body.empty();\n  if (!techHTML) {\n    body.text('Loading data...');\n    body.load('/api/' + dnskillsim_region + '/tech/' + Job.EnglishName, function(res) {\n      techHTML = res;\n      init_techs();\n    });\n  } else {\n    body.html(techHTML);\n    init_techs();\n  }\n\n  modal.modal('show');\n}\n\nfunction init_techs() {\n  var ids = ['necklace', 'earring', 'ring-1', 'ring-2', 'weapon', 'crest'];\n  var keys = ['Necklace', 'Earring', 'Ring1', 'Ring2', 'Weapon', 'Crest'];\n  ids.forEach(function(id, i) {\n    var tech = $('#tech-' + id);\n    var btn = tech.next();\n    var skillID = Job.Techs[keys[i]];\n    if (skillID) { // already has something at start\n      tech.val(skillID).prop('disabled', true);\n      btn.removeClass('btn-default').addClass('btn-danger').text('-1');\n    }\n\n    btn.prop('disabled', !tech.val() || !skillID);\n    tech.change(function() {\n      var val = tech.val();\n      btn.removeClass('btn-default btn-primary')\n         .addClass(val ? 'btn-primary' : 'btn-default')\n         .prop('disabled', !val);\n    });\n\n    btn.click(function() {\n      var skillID = Job.Techs[keys[i]];\n      btn.removeClass('btn-default btn-primary btn-danger');\n      if (skillID) { // remove tech\n        delete Job.Techs[keys[i]];\n        btn.text('+1').addClass('btn-primary');\n      } else { // add tech\n        Job.Techs[keys[i]] = skillID = num(tech.val());\n        btn.text('-1').addClass('btn-danger');\n      }\n\n      var dom = $('.skill').filter('[data-skill=' + skillID + ']');\n      update_skill_icon(skillID, dom);\n      if ($dpop.persist && $dpop.persist.data('skill') == skillID) {\n        $dpop.update(dom[0], dom);\n      }\n      tech.prop('disabled', !skillID);\n      tech_disable(Job.Techs);\n      history_push();\n    });\n  });\n\n  tech_disable(Job.Techs);\n}\n\nfunction get_tech_count(techs, skillID) {\n  if (skillID === undefined) {\n    skillID = techs;\n    techs = Job.Techs;\n  }\n\n  var c = 0;\n  for (var key in techs) {\n    if (techs[key] == skillID) {\n      c++;\n    }\n  }\n\n  return c;\n}\n\nfunction tech_disable(techs) {\n  // general disabling\n  var ids = ['necklace', 'earring', 'ring-1', 'ring-2', 'weapon'];\n  var keys = ['Necklace', 'Earring', 'Ring1', 'Ring2', 'Weapon'];\n\n  $('.modal').find('option:disabled').prop('disabled', false); // re-enable for now\n\n  for (var i = 0; i < keys.length; i++) {\n    var skillID = techs[keys[i]];\n    if (!skillID) {\n      continue;\n    }\n\n    var remainder = [].concat(ids);\n    remainder.splice(i,1); // take out self\n    remainder.forEach(function(id) {\n      if (techs[keys[ids.indexOf(id)]] != skillID) {\n        disable_skill_tech($('#tech-' + id), skillID);\n      }\n    });\n\n    var lvl = Job.Cache[skillID];\n    var skill = db.Skills[skillID];\n    var counts = get_tech_count(techs, skillID);\n    if (lvl[0] + counts >= skill.MaxLevel && techs.Crest != skillID) {\n      disable_skill_tech($('#tech-crest'), skillID);\n    }\n  }\n\n  // disable from crest\n  var skillID = techs.Crest;\n  if (skillID) {\n    var lvl = Job.Cache[skillID];\n    var skill = db.Skills[skillID];\n    var counts = get_tech_count(techs, skillID);\n    if (lvl[0] + counts >= skill.MaxLevel) {\n      ids.forEach(function(id, idx) {\n        if (techs[keys[idx]] != skillID) {\n          disable_skill_tech($('#tech-' + id), skillID);\n        }\n      });\n    }\n  }\n\n  // disable lvl 0 skills\n  ids.push('crest');\n  ids.forEach(function(id) {\n    var tech = $('#tech-' + id);\n    for (var skillID in db.Skills) {\n      var lvl = Job.Cache[skillID];\n      if (!lvl[0]) {\n        disable_skill_tech(tech, skillID);\n      }\n    }\n  });\n}\n\nfunction disable_skill_tech(tech, skillID) {\n  var btn = tech.next();\n  if (tech.val() == skillID) { // don't keep it selected\n    tech.val('');\n    btn.removeClass('btn-primary btn-danger')\n       .addClass('btn-default')\n       .prop('disabled', true)\n       .text('+1');\n  }\n\n  // disable the option\n  var opt = tech.find('option[value=' + skillID + ']');\n  if (opt.length) {\n    opt.prop('disabled', true);\n  }\n}\n"]}