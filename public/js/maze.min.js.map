{"version":3,"sources":["maze.js","skill.js","description.js","tech.js"],"names":[],"mappingszbfile":"maze.min.js","sourcesContent":["function skillsim() {\r\n  // initialize all the images\r\n  $('.jobsprite').each(function() {\r\n    this.style.backgroundImage = \"url('\" + urls.mainbar + \"/\" + $TIMESTAMP + \"jobicon_main.png')\";\r\n  });\r\n\r\n  // is async, don't care when we get it\r\n  $.getJSON(urls.job, function(data) {\r\n    db = data;\r\n\r\n    // have it stay a little\r\n    dskills.each(function() {\r\n      this.setAttribute('data-desc', 'hover');\r\n      init_description(this);\r\n    });\r\n  });\r\n\r\n  dskills.each(function() {\r\n    var dom = $(this);\r\n    var skillID = this.getAttribute('data-skill');\r\n    var lvl = Job.Cache[skillID];\r\n    var grayed = lvl[0] == 0 ? '_b' : '';\r\n    var sprite = Job.Sprites[skillID];\r\n    var techs = get_tech_count(skillID);\r\n    sprite[1] *= -50;\r\n    sprite[2] *= -50;\r\n\r\n    this.style.background = \"url('\"+ urls.mainbar  +\"/\" + $TIMESTAMP + \"skillicon\" + sprite[0] + grayed + \".png') \" + sprite[1] + \"px \" + sprite[2] + \"px\"; // initial setup\r\n    this.getElementsByClassName('skill-bdr')[0].style.background = \"url('\" + urls.border + \"') 100px 0\";\r\n\r\n\r\n    dom.find('.skill-lvl').text([lvl[0] + techs, lvl[3]].join('/'));\r\n    \r\n    var t = this;\r\n    dom.on('mousedown', function(event) {\r\n      if ($dpop.persist) {\r\n        $dpop.update($dpop.persist[0], $dpop.persist);\r\n      }\r\n      skill_adj(event, t);\r\n    });\r\n    \r\n    dom.on(\"swiperight\",function(event) {\r\n      if ($dpop.persist) {\r\n        $dpop.update($dpop.persist[0], $dpop.persist);\r\n      }\r\n      skill_adj({ button: 0}, t);\r\n    });\r\n    dom.on(\"swipeleft\",function(event) {\r\n      if ($dpop.persist) {\r\n        $dpop.update($dpop.persist[0], $dpop.persist);\r\n      }\r\n      skill_adj({ button: 2}, t);\r\n    });\r\n  });\r\n\r\n  $('.panel-body').on('contextmenu', prevent_default);\r\n\r\n\r\n  // the apply type\r\n  $('#pvp').click(reverse('#pve', function() {\r\n                    set_cookie(\"apply_type\", 1);\r\n                    Job.ApplyType = 1;\r\n                    if ($dpop.persist) {\r\n                      $dpop.update($dpop.persist[0], $dpop.persist);\r\n                    }\r\n                    return !0;\r\n                  }));\r\n  $('#pve').click(reverse('#pvp', function() {\r\n                    set_cookie(\"apply_type\", 0);\r\n                    Job.ApplyType = 0;\r\n                    if ($dpop.persist) {\r\n                      $dpop.update($dpop.persist[0], $dpop.persist);\r\n                    }\r\n                    return !0;\r\n                  }));\r\n\r\n  // the level\r\n  $('#lv93').click(reverse('#lv95', function() {\r\n                    Job.MaxLevel = 93;\r\n                    history_push();\r\n                    refresh_sp(get_max_sp(), false);\r\n                    if ($dpop.persist) {\r\n                      $dpop.update($dpop.persist[0], $dpop.persist);\r\n                    }\r\n                  }));\r\n  $('#lv95').click(reverse('#lv93', function() {\r\n                    Job.MaxLevel = 95;\r\n                    history_push();\r\n                    refresh_sp(get_max_sp(), false);\r\n                    if ($dpop.persist) {\r\n                      $dpop.update($dpop.persist[0], $dpop.persist);\r\n                    }\r\n                  }));\r\n\r\n  // the strictness\r\n  $('#free').click(reverse('#strict', function() {\r\n                     set_cookie('free', 1);\r\n                     return Job.Free = true;\r\n                   }));\r\n  $('#strict').click(reverse('#free', strict_switch));\r\n\r\n  var search = 0;\r\n  $('#s').val('').on('input', function() {\r\n    ++search;\r\n    var search_set = search;\r\n\r\n    var str = $('#s').val();\r\n\r\n    setTimeout(function() {\r\n      if (search != search_set) {\r\n        return;\r\n      }\r\n\r\n      search = 0; // reset it\r\n\r\n      var re;\r\n      try {\r\n        re = new RegExp(str, 'im');\r\n      } catch (x) {\r\n        return;\r\n      }\r\n\r\n      dskills.each(function() {\r\n        var dom = $(this);\r\n        if (str.length > 2) {\r\n          update_description(this, dom);\r\n          var opts = dom.data('bs.popover').options;\r\n\r\n          // check title\r\n          var text = opts.title.text();\r\n          if (re.test(text)) {\r\n            this.style.opacity = 1;\r\n            return;\r\n          }\r\n\r\n          text = opts.content.clone();\r\n          text.find('.hidden').remove();\r\n          this.style.opacity = re.test(text.text()) ? 1 : .33;\r\n        } else {\r\n          this.style.opacity = 1;\r\n        }\r\n      });\r\n    }, 100); // .1s delay\r\n  });\r\n\r\n  $('#level-btn').mousedown(resetBuild);\r\n    \r\n  function resetBuild() {\r\n    var level = Job.MaxLevel;\r\n    dskills.each(function() {\r\n      var dom = $(this);\r\n      var skillID = this.getAttribute('data-skill');\r\n      var skill = db.Skills[skillID];\r\n      var lvl = Job.Cache[skillID];\r\n\r\n      // update skill lvl\r\n      if (level <= Job.MaxLevel) {\r\n        Job.Techs = {};\r\n        lvl[0] = db.Skills[skillID].LevelLimit[0] == 1 ? 1 : 0;\r\n        lvl[2] = 0;\r\n        techs = 0;\r\n      }\r\n\r\n      if (level != Job.MaxLevel) {\r\n        // calculate new max SP\r\n        var newMax = 0;\r\n        var absMax = skill.MaxLevel - skill.SPMaxLevel;\r\n        for (var i = absMax, j = 1; i > 0; i--, j++) {\r\n          if (skill.LevelLimit[i-1] <= level) {\r\n            newMax = i;\r\n            break;\r\n          }\r\n\r\n          if (skill.LevelLimit[j-1] <= level) {\r\n            newMax = j;\r\n          } else {\r\n            break;\r\n          }\r\n        }\r\n\r\n        lvl[1] = Math.min(newMax, absMax);\r\n      }\r\n\r\n      update_skill_icon(skillID, dom);\r\n    });\r\n\r\n    // update panels\r\n    refresh_sp(get_max_sp(level), level <= Job.MaxLevel);\r\n\r\n    // other caches to reset\r\n    if (level <= Job.MaxLevel) {\r\n      Job.TSP = [0,0,0];\r\n      Job.SkillGroups = {};\r\n      Job.BaseSkills = {};\r\n    }\r\n    Job.MaxLevel = level;\r\n\r\n    update_progress();\r\n    history_push();\r\n  }\r\n\r\n  $('#techs').click(techniques)\r\n}\r\n\r\nfunction update_progress() {\r\n  var total_sp = get_total_sp();\r\n  var max_sp = get_max_sp();\r\n  var percent = (total_sp/max_sp) * 100;\r\n  $('#max-progress').text(format(lang.progress.max, max_sp));\r\n  $('#progress').css('width', percent + '%');\r\n  $('#rem-progress').text(format(lang.progress.remaining, max_sp - total_sp));\r\n  $('#curr-progress').text(format(lang.progress.curr, total_sp));\r\n}\r\n\r\nfunction set_opacity(dom, o) {\r\n  if (o < 0 || o > 1) {\r\n    return -1;\r\n  }\r\n\r\n  dom.css(\"opacity\", o);\r\n  return o;\r\n};\r\n\r\nfunction prevent_default(e) {\r\n  e.preventDefault();\r\n}\r\n\r\nfunction num(v) {\r\n  return parseInt(v);\r\n}\r\n\r\nfunction sum(p, c) {\r\n  return p+c;\r\n}\r\n\r\nfunction get_total_sp() {\r\n  return Job.TSP.reduce(sum);\r\n}\r\n\r\nfunction get_max_sp(level) {\r\n  return Job.Levels.slice(0, level || Job.MaxLevel).reduce(sum);\r\n}\r\n\r\nfunction tag(t, cls, text) {\r\n  return $(document.createElement(t))\r\n                   .addClass(cls)\r\n                   .text(text);\r\n}\r\n\r\nvar ON = 'btn-primary', OFF = 'btn-default';\r\nfunction reverse(rev, handler) {\r\n  return function() {\r\n    if (handler() === false) {\r\n      return;\r\n    }\r\n    $(rev).removeClass(ON).addClass(OFF);\r\n    $(this).addClass(ON);\r\n    history_push();\r\n  };\r\n}\r\n\r\nfunction strict_checker(setFree) {\r\n  var modal = $('#modal');\r\n  var title = $('#modal-title');\r\n  var body = $('#modal-body');\r\n  var changeable = true;\r\n  var warnings = [];\r\n\r\n  dskills.each(function() {\r\n    var skillID = num(this.getAttribute('data-skill'));\r\n    var lvl = Job.Cache[skillID];\r\n    var skill = db.Skills[skillID];\r\n\r\n    // make sure needsp is fine\r\n    if (lvl[0] > 0) {\r\n      if (!check_skill_reqs_state(skillID, skill, warnings)) {\r\n        changeable = false;\r\n        return;\r\n      }\r\n\r\n      if (!check_skill_groups(skillID, skill, warnings)) {\r\n        changeable = false;\r\n        return;\r\n      }\r\n    }\r\n  });\r\n\r\n  if (changeable && setFree) {\r\n    Job.Free = false;\r\n    set_cookie('free', 0);\r\n  } else {\r\n    title.text(lang.strict_title);\r\n    body.empty().append(warnings.map(function(v) {\r\n                          return tag('p', null, v);\r\n                        }));\r\n  }\r\n\r\n  return changeable;\r\n}\r\n\r\nfunction strict_switch() {\r\n  if (!strict_checker(true)) {\r\n    $('#modal').modal('show');\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nvar build_chars = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_'.split('');\r\nfunction history_push() {\r\n  \r\n  if(typeof dskills === 'undefined') {\r\n    return;\r\n  }\r\n\r\n  var build_path = [];\r\n  dskills.each(function() {\r\n    var skillID = this.getAttribute('data-skill');\r\n    var pos = Job.Sprites[skillID][3];\r\n    var lvl = Job.Cache[skillID];\r\n    var maybeMinus1 = db.Skills[skillID].LevelLimit[1-1] == 1 ? 1 : 0;\r\n    var b = [build_chars[lvl[0] - maybeMinus1]];\r\n    var techs = get_tech_count(skillID);\r\n    if (techs > 0) {\r\n      if (Job.Techs.Crest == skillID) {\r\n        b.push('.');\r\n      }\r\n\r\n      if (Job.Techs.Weapon == skillID) {\r\n        b.push(\"'\");\r\n      }\r\n\r\n      ['Necklace', 'Earring', 'Ring1', 'Ring2'].forEach(function(key) {\r\n        if (Job.Techs[key] == skillID) {\r\n          b.push('!');\r\n        }\r\n      });\r\n\r\n    }\r\n    b.push();\r\n    build_path[pos] = b;\r\n  });\r\n\r\n  var full_build_path = [];\r\n  for (var i = 0; i < build_path.length; i++) {\r\n    if (build_path[i] === undefined) {\r\n      full_build_path.push('-');\r\n    } else {\r\n      full_build_path = full_build_path.concat(build_path[i]);\r\n    }\r\n  }\r\n\r\n  history.pushState(Job, null, '/' + dnskillsim_region + '/' + Job.EnglishName + '-' + Job.MaxLevel + '/' + full_build_path.join(''));\r\n}\r\n\r\nfunction refresh_sp(max_sp, reset) {\r\n  // job sp\r\n  $('.panel').each(function(jobNum) {\r\n    var spdom = $(this).find('.panel-heading').find('span');\r\n    var sp = spdom.text().split('/').map(num);\r\n    var sp_ratio = Job.SP[jobNum];\r\n    sp[1] = num(max_sp * sp_ratio);\r\n\r\n    if (reset) {\r\n      sp[0] = 0;\r\n    } else {\r\n      sp[0] = Job.TSP[jobNum];\r\n    }\r\n\r\n    spdom.text(sp.join('/'));\r\n  });\r\n\r\n  update_progress();\r\n}\r\n\r\nwindow.addEventListener('popstate', function(e) {\r\n  oldJob = e.state || jQuery.extend(!0, {}, $Job);\r\n  oldJob.ApplyType = Job.ApplyType;\r\n  oldJob.Free = Job.Free;\r\n  Job = oldJob;\r\n\r\n  dskills.each(function() {\r\n    var dom = $(this);\r\n    var skillID = this.getAttribute('data-skill');\r\n\r\n    // update indivdual skills\r\n    update_skill_icon(skillID, dom);\r\n  });\r\n\r\n  refresh_sp(get_max_sp(), false);\r\n\r\n  var a = '#pvp', b = '#pve';\r\n  if (Job.ApplyType) {\r\n    a = '#pve', b = '#pvp';\r\n  }\r\n  $(a).removeClass(ON).addClass(OFF);\r\n  $(b).addClass(ON);\r\n\r\n  a = '#free', b = '#strict';\r\n  if (Job.Free) {\r\n    a = '#strict', b = '#free';\r\n  }\r\n  $(a).removeClass(ON).addClass(OFF);\r\n  $(b).addClass(ON);\r\n\r\n  if ($dpop.persist) {\r\n    $dpop.update($dpop.persist[0], $dpop.persist);\r\n  }\r\n});\r\n\r\nfunction set_cookie(name, value) {\r\n    var d = new Date();\r\n    d.setTime(d.getTime() + (356*24*60*60*1000));\r\n    document.cookie = name + \"=\" + value + \"; path=/; expires=\" + d.toUTCString();\r\n}\r\n\r\nfunction format(str) {\r\n  var args = Array.prototype.slice.call(arguments, 1);\r\n  var s = '';\r\n  var len = str.length;\r\n  var idx = 0;\r\n  for (var i = 0; i < len; i++) {\r\n    var c1 = str[i], c2 = str[i + 1];\r\n    if (c1 == '?') {\r\n      if (c2 == '?') {\r\n        ++i;\r\n        s += '?';\r\n      } else {\r\n        if (args[idx] === undefined) {\r\n          s += \"\";\r\n        } else {\r\n          s += args[idx];\r\n        }\r\n        idx++;\r\n      }\r\n    } else {\r\n      s += c1;\r\n    }\r\n  }\r\n  return s;\r\n}\r\n","function skill_adj(e, element) {\r\n  if (e.altKey) {\r\n    return; // don't do anything\r\n  }\r\n\r\n  var dom = $(element);\r\n  var skillID = num(element.getAttribute('data-skill')); // indexOf is strict\r\n  var max = e.shiftKey || e.ctrlKey;\r\n  var lvl = [].concat(Job.Cache[skillID]); // clone it\r\n  var skill = db.Skills[skillID];\r\n  var techs = get_tech_count(skillID);\r\n\r\n  var prev = lvl[0];\r\n  if (e.button == 0) { // left click\r\n    lvl[0] = Math.min(lvl[1], max ? lvl[1] : lvl[0] + 1);\r\n  } else if (e.button == 2) { // right click\r\n    lvl[0] = Math.max(0, max ? 0 : lvl[0] - 1);\r\n    if (skill.LevelLimit[1-1] == 1 && lvl[0] == 0) { // default case\r\n      lvl[0] = 1;\r\n    }\r\n  }\r\n\r\n  var panel = dom.closest('.panel');\r\n  var spdom = panel.find('.panel-heading').find('span'); // do something later\r\n  var sp = spdom.text().split('/').map(num);\r\n  var jobNum = num(panel.data('job'));\r\n\r\n  // find SP difference\r\n  var diff = 0, end = Math.max(prev, lvl[0]), inc = prev < lvl[0], totalSP = get_total_sp(), maxSP = get_max_sp();\r\n  if (inc) {\r\n    for (var i = prev + 1; i <= lvl[0]; i++) {\r\n      var s = skill.SkillPoint[i-1];\r\n      if (sp[0] + diff + s > sp[1] || totalSP + diff + s > maxSP) {\r\n        lvl[0] = i - 1;\r\n        break;\r\n      }\r\n\r\n      diff += s;\r\n    }\r\n  } else {\r\n    for (var i = prev; i > lvl[0]; i--) {\r\n      var s = skill.SkillPoint[i-1];\r\n      diff -= s;\r\n      if (!Job.Free && !can_reduce_skill(skillID, skill, i - 1, jobNum, Job.TSP[jobNum] + diff)) {\r\n        lvl[0] = i;\r\n        diff += s;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (prev == lvl[0] || lvl[0] + techs > skill.MaxLevel) {\r\n    return; // do nothing\r\n  }\r\n\r\n  if (!Job.Free) {\r\n    if (lvl[0] > prev) { // skill reduction\r\n      if (!check_skill_reqs(skillID, skill)) {\r\n        return;\r\n      }\r\n\r\n      if (!check_skill_groups(skillID, skill)) {\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (lvl[0] == 0 && techs > 0) {\r\n    for (var tech in Job.Techs) {\r\n      if (Job.Techs[tech] == skillID) {\r\n        delete Job.Techs[tech];\r\n      }\r\n    }\r\n    techs = 0;\r\n  }\r\n\r\n  // add skillgroup\r\n  if (skill.SkillGroup) {\r\n    var g = skill.SkillGroup;\r\n    if (!Job.SkillGroups[g]) { // nothing exists\r\n      Job.SkillGroups[g] = [];\r\n    }\r\n\r\n    var group = Job.SkillGroups[g];\r\n    if (lvl[0] && group.indexOf(skillID) == -1) {\r\n      group.push(skillID);\r\n    } else if (!lvl[0] && group.indexOf(skillID) != -1) {\r\n      Job.SkillGroups[g] = group.filter(function($skillID) { return $skillID != skillID });\r\n    }\r\n  }\r\n\r\n  if (skill.BaseSkillID) {\r\n    var b = skill.BaseSkillID;\r\n    if (! Job.BaseSkills[b]) {\r\n      Job.BaseSkills[b] = [];\r\n    }\r\n    var base = Job.BaseSkills[b];\r\n    if (lvl[0] && base.indexOf(skillID) == -1) {\r\n      base.push(skillID);\r\n    } else if (!lvl[0] && base.indexOf(skillID) != -1) {\r\n      Job.BaseSkills[b] = base.filter(function($skillID) { return $skillID != skillID });\r\n    }\r\n  }\r\n\r\n  // SP adjustment\r\n  sp[0] += diff;\r\n  lvl[2] += diff;\r\n  totalSP += diff;\r\n  Job.TSP[jobNum] += diff;\r\n\r\n  // panel update\r\n  spdom.text(sp.join('/'));\r\n\r\n\r\n  // icon update\r\n  Job.Cache[skillID] = lvl;\r\n  update_skill_icon(skillID, dom, techs);\r\n\r\n  // hooks\r\n  update_progress();\r\n  // $dpop.update(element, dom);\r\n  history_push();\r\n}\r\n\r\nfunction update_skill_icon(skillID, dom, techs) {\r\n  if (techs === undefined) {\r\n    techs = get_tech_count(skillID);\r\n  }\r\n\r\n  var lvl = Job.Cache[skillID];\r\n  var thiz = dom[0];\r\n  var image = thiz.style.backgroundImage.replace('_b.png', '.png');\r\n\r\n  thiz.style.backgroundImage = lvl[0] ? image : image.replace('.png', '_b.png');\r\n\r\n  dom.find('.skill-bdr')\r\n     .removeClass('g')\r\n     .addClass(lvl[0] ? null : 'g');\r\n\r\n  dom.find('.skill-lvl')\r\n     .removeClass('g b')\r\n     .text([lvl[0] + techs, lvl[3]].join('/'))\r\n     .addClass(techs == 1 ? 'g' : (techs == 2 ? 'b' : null));\r\n\r\n}\r\n\r\n\r\nfunction level_satisfied(skillID, level) {\r\n  var lvl = Job.Cache[skillID];\r\n  return lvl[0] >= level;\r\n}\r\n\r\nfunction check_skill_reqs(skillID, skill) {\r\n  // check if sp total is satisfied\r\n  if (skill.NeedSP) {\r\n    for (var i = 0; i < 3; i++) {\r\n      if (Job.TSP[i] < skill.NeedSP[i]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  // make sure parent skill is fine\r\n  if (skill.ParentSkills) {\r\n    if (skill.SkillGroup == 1 && Job.SkillGroups[1] && Job.SkillGroups[1].length) {\r\n      if (!check_ult_reqs()) {\r\n        return false;\r\n      }\r\n    } else {\r\n      for (var $skillID in skill.ParentSkills) {\r\n        if (! level_satisfied($skillID, skill.ParentSkills[$skillID])) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  var base = Job.BaseSkills[skill.BaseSkillID];\r\n  if (base && base.indexOf(skillID) == -1 && base.length) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction check_ult_reqs() {\r\n  var atleastone = false;\r\n  if (Job.SkillGroups[1]) {\r\n    Job.SkillGroups[1].forEach(function(skillID) {\r\n      var skill = db.Skills[skillID];\r\n      var one = true;\r\n      for (var $skillID in skill.ParentSkills) {\r\n        one &= level_satisfied($skillID, skill.ParentSkills[$skillID]);\r\n      }\r\n\r\n      atleastone |= one;\r\n    });\r\n  }\r\n\r\n  return atleastone;\r\n}\r\n\r\nfunction check_skill_reqs_state(skillID, skill, warnings) {\r\n  // check if sp total is satisfied\r\n  if (skill.NeedSP) {\r\n    for (var i = 0; i < 3; i++) {\r\n      if (Job.TSP[i] < skill.NeedSP[i]) {\r\n        if (warnings) {\r\n          warnings.push(format(lang.warnings.tsp, db.Lookup[skill.NameID], Job.Names[i], skill.NeedSP[i]));\r\n        }\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  // make sure parent skill is fine\r\n  if (skill.SkillGroup != 1 && skill.ParentSkills) { // doesn't matter for ults\r\n    for (var $skillID in skill.ParentSkills) {\r\n      if (! level_satisfied($skillID, skill.ParentSkills[$skillID])) {\r\n        if(warnings) {\r\n          warnings.push(format(lang.warnings.parent, db.Lookup[skill.NameID], db.Lookup[db.Skills[$skillID].NameID], skill.ParentSkills[$skillID]));\r\n        }\r\n\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  var base = Job.BaseSkills[skill.BaseSkillID];\r\n  if (base && base.indexOf(skillID) != -1 && base.length > 1) {\r\n    if (warnings) {\r\n      base.forEach(function($skillID) {\r\n        if ($skillID != skillID) {\r\n          warnings.push(format(lang.warnings.base, db.Lookup[skill.NameID], db.Lookup[db.Skills[$skillID].NameID]));\r\n        }\r\n      });\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// check skill group\r\nfunction check_skill_groups(skillID, skill, warnings) {\r\n  if (skill.SkillGroup) {\r\n    var group = Job.SkillGroups[skill.SkillGroup];\r\n    if (skill.SkillGroup == 1 && group && group.length) { // ultimate\r\n      if (warnings) { // hate doing this kinda stuff, but :/\r\n        if (!check_ult_reqs()) {\r\n          group.forEach(function($skillID) {\r\n            var $skill = db.Skills[$skillID];\r\n            for (var $$skillID in $skill.ParentSkills) {\r\n              if (! level_satisfied($$skillID, $skill.ParentSkills[$$skillID])) {\r\n                var fmt = format(lang.warnings.parent, db.Lookup[$skill.NameID], db.Lookup[db.Skills[$$skillID].NameID], $skill.ParentSkills[$$skillID]);\r\n                if (warnings.indexOf(fmt) == -1) {\r\n                  warnings.push(fmt);\r\n                }\r\n\r\n                return;\r\n              }\r\n            }\r\n          });\r\n          return false;\r\n        }\r\n      }\r\n    } else if (group && group.length) {\r\n      var found = group.indexOf(skillID) != -1;\r\n      if (warnings && group.length > 1 && found) {\r\n        group.forEach(function($skillID) {\r\n          if ($skillID != skillID) {\r\n            warnings.push(format(lang.warnings.group, db.Lookup[skill.NameID], db.Lookup[db.Skills[$skillID].NameID]));\r\n          }\r\n        });\r\n      }\r\n      return group.length == 1 && found;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction can_reduce_skill(skillID, skill, newLevel, jobNum, newJobSP) {\r\n  for (var $skillID in db.Skills) {\r\n    if ($skillID == skillID) {\r\n      continue;\r\n    }\r\n\r\n    var $skill = db.Skills[$skillID];\r\n    var lvl = Job.Cache[$skillID];\r\n\r\n    // will this create an SP violation to any other skill?\r\n    if ($skill.NeedSP) {\r\n      if (lvl[0] && newJobSP < $skill.NeedSP[jobNum]) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (skill.SkillGroup == 1 && $skill.SkillGroup == 1 && lvl[0] > 0 && !newLevel) {\r\n      var group = Job.SkillGroups[1];\r\n      for (var $$skillID in $skill.ParentSkills) {\r\n        if (!level_satisfied($$skillID, $skill.ParentSkills[$$skillID])) {\r\n          return false;\r\n        }\r\n      }\r\n    } else {\r\n      // is this skill a parent of any other valid skill?\r\n      if ($skill.ParentSkills && $skill.ParentSkills[skillID]) {\r\n        if (lvl[0] && newLevel < $skill.ParentSkills[skillID]) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}","var $body = $('body');\r\nvar $lang = lang.description;\r\nfunction popover_placement(popover, td) {\r\n  var parent = $(td).parent();\r\n  var childen = parent.parent().children();\r\n  if(childen.length <= 2) {\r\n    return 'left';\r\n  }\r\n  var index = childen.index(parent);\r\n  if(index >= 2) {\r\n    return 'left';\r\n  }\r\n  else {\r\n    return 'right';\r\n  }\r\n}\r\nfunction init_description(thiz) {\r\n  $(thiz).popover({animation: false,\r\n                   html: true,\r\n                   trigger: 'manual',\r\n                   placement: popover_placement,\r\n                   container: $body})\r\n         .on('mouseenter', $dpop.mouseenter)\r\n         .on('mouseleave', $dpop.mouseleave)\r\n         .on('mousedown', $dpop.mousedown)\r\n         .on('taphold', $dpop.mouseenter);\r\n}\r\n\r\nfunction update_description(thiz, dom) {\r\n  var skillID = thiz.getAttribute('data-skill');\r\n  var lvl = Job.Cache[skillID];\r\n  var skill = db.Skills[skillID];\r\n  var opts = dom.data('bs.popover').options;\r\n  opts.title = tag('span', Job.ApplyType ? 's' :null, format($lang.name[Job.ApplyType], db.Lookup[skill.NameID]));\r\n  var d = opts.content ? opts.content : desc_fields.clone(true);\r\n  var techs = get_tech_count(skillID), tech_append = \"\";\r\n  if (techs > 0) {\r\n    tech_append = \" +\" + techs;\r\n  }\r\n\r\n  // non-level related fields - no conditions\r\n  d.find('.dlvl').find('span:last').text(Math.max(1, lvl[0]) + tech_append);\r\n  d.find('.dlimit').find('span:last').text(lvl[3]);\r\n  if (lvl[2]) {\r\n    d.find('.dtsp').show().removeClass('hidden').find('span:last').text(lvl[2]);\r\n  } else {\r\n    d.find('.dtsp').hide().addClass('hidden');\r\n  }\r\n\r\n  // non-level related fields - with conditions\r\n  if (skill.NeedWeaponType) {\r\n    d.find('.dweaps')\r\n     .find('span:last')\r\n     .text(skill.NeedWeaponType.map($d.weapon).join(', '));\r\n  } else {\r\n    d.find('.dweaps').remove();\r\n  }\r\n\r\n  var skillType = $lang.type.passive;\r\n  switch(skill.SkillType) {\r\n    case 0: switch(skill.DurationType) {\r\n      case 0: skillType = $lang.type.instant; break;\r\n      case 1: skillType = $lang.type.buff; break;\r\n      case 2: skillType = $lang.type.debuff; break;\r\n    }\r\n    break;\r\n    case 3: skillType = $lang.type.ex; break;\r\n  }\r\n  d.find('.dtype').find('span:last').text(skillType);\r\n\r\n\r\n  var ele = $lang.element.none;\r\n  switch(skill.Element) {\r\n    case 0: ele = $lang.element.fire; break;\r\n    case 1: ele = $lang.element.water; break;\r\n    case 2: ele = $lang.element.light; break;\r\n    case 3: ele = $lang.element.dark; break;\r\n  }\r\n  d.find('.dele').find('span:last').text(ele);\r\n\r\n\r\n  // level related fields\r\n  var curr = lvl[0] + techs;\r\n  var nextLevelLimit = skill.LevelLimit[curr-1];\r\n  var nextSkillPoint = skill.SkillPoint[curr];\r\n\r\n  var curDecreaseSP = skill.DecreaseSP[Job.ApplyType][curr-1];\r\n  var nextDecreaseSP = skill.DecreaseSP[Job.ApplyType][curr];\r\n\r\n  var curDelayTime = skill.DelayTime[Job.ApplyType][curr-1];\r\n  var nextDelayTime = skill.DelayTime[Job.ApplyType][curr];\r\n\r\n  var curSkillExplanationID = skill.SkillExplanationID[Job.ApplyType][curr-1];\r\n  var nextSkillExplanationID = skill.SkillExplanationID[Job.ApplyType][curr];\r\n\r\n  var curSkillExplanationIDParam = skill.SkillExplanationIDParam[Job.ApplyType][curr-1];\r\n  var nextSkillExplanationIDParam = skill.SkillExplanationIDParam[Job.ApplyType][curr];\r\n\r\n  // level up req stuff\r\n  if (nextLevelLimit) {\r\n    d.find('.dreq').show().removeClass('hidden');\r\n    d.find('.dreqlvl')\r\n     .find('span:last')\r\n     .removeClass('r')\r\n     .addClass(Job.MaxLevel < nextLevelLimit ? 'r' : null)\r\n     .text(nextLevelLimit);\r\n\r\n    // sp by job req\r\n    if (skill.NeedSP) {\r\n      d.find('.dreqtsp')\r\n       .empty()\r\n       .append(skill.NeedSP.map($d.sp));\r\n    } else {\r\n      d.find('.dreqtsp').remove();\r\n    }\r\n\r\n    // skill level req\r\n    if (skill.ParentSkills) {\r\n      var arr = [];\r\n      for (var $skillID in skill.ParentSkills) {\r\n        var reqlvl = skill.ParentSkills[$skillID]\r\n        var $lvl = Job.Cache[$skillID];\r\n        arr.push(tag('div',\r\n                     $lvl[0] < reqlvl ? 'r' : null,\r\n                     format($lang.req.parent, db.Lookup[db.Skills[$skillID].NameID], reqlvl)));\r\n      }\r\n      d.find('.dreqskills')\r\n       .empty()\r\n       .append(arr);\r\n    } else {\r\n      d.find('.dreqskills').remove();\r\n    }\r\n\r\n\r\n    // stuff that shouldn't show when unnecessary\r\n    var jobNum = dom.closest('.panel').data('job');\r\n    var maxSP = get_max_sp();\r\n    var jobSP = Job.TSP[jobNum];\r\n    var totalSP = get_total_sp();\r\n\r\n    d.find('.dreqsp')\r\n     .find('span:last')\r\n     .text(nextSkillPoint)\r\n     .removeClass('r')\r\n     .addClass((jobSP + nextSkillPoint > maxSP*Job.SP[jobNum] ||\r\n                totalSP + nextSkillPoint > maxSP) ? 'r' : null);\r\n  } else {\r\n    d.find('.dreq').hide().addClass('hidden');\r\n  }\r\n\r\n  // apply type specific\r\n  var decreaseSP = curDecreaseSP ? curDecreaseSP : nextDecreaseSP;\r\n  if (decreaseSP) {\r\n    d.find('.dmp')\r\n     .removeClass('hidden')\r\n     .show()\r\n     .find('span:last')\r\n     .text(decreaseSP);\r\n  } else {\r\n    d.find('.dmp').hide().addClass('hidden');\r\n  }\r\n\r\n  var delayTime = (curDelayTime ? curDelayTime : nextDelayTime) / 1000;\r\n  if (delayTime) {\r\n    d.find('.dcd')\r\n     .removeClass('hidden')\r\n     .show()\r\n     .find('span:last')\r\n     .text(format($lang.cd,  delayTime));\r\n  } else {\r\n    d.find('.dcd').hide().addClass('hidden');\r\n  }\r\n\r\n\r\n  // descriptions\r\n  var explID = curSkillExplanationID ? curSkillExplanationID : nextSkillExplanationID;\r\n  var explParams = curSkillExplanationIDParam ? curSkillExplanationIDParam : nextSkillExplanationIDParam;\r\n  d.find('.dnowv').html(desc_format(db.Lookup[explID], explParams));\r\n  if (curr == 0 || curr == skill.MaxLevel) { // level 0/maxed; no next, but show next/now\r\n    d.find('.dnext').hide().addClass('hidden');\r\n    d.find('.dnextdiv').hide();\r\n  } else {\r\n    d.find('.dnextdiv').show();\r\n    d.find('.dnext').show().removeClass('hidden');\r\n    d.find('.dnextv').html(desc_format(db.Lookup[nextSkillExplanationID],\r\n                                       nextSkillExplanationIDParam));\r\n  }\r\n\r\n  opts.content = d;\r\n}\r\n\r\nfunction desc_tag(cls, field) {\r\n  return tag('div', cls).append(tag('span', 'o', field + ': '), tag('span'));\r\n}\r\n\r\nvar $d = {\r\n  params: function(p) {\r\n    if (p[0] == '{') {\r\n      return db.Lookup[p.substring(1, p.length - 1)];\r\n    } else {\r\n      return p;\r\n    }\r\n  },\r\n  weapon: function(w) {\r\n    return db.Weapons[w];\r\n  },\r\n  sp: function(sp,i) {\r\n    if (sp > 0) {\r\n      return tag('span',\r\n                 Job.TSP[i] < sp ? 'r' : null,\r\n                 format($lang.req.tsp, Job.Names[i], sp));\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n};\r\n\r\nvar $dpop = {\r\n  persist: null,\r\n  mouseenter: function () {\r\n    var dom = $(this), trigger = dom.data('desc');\r\n    if (trigger == 'hover' && !$dpop.persist) {\r\n      update_description(this, dom);\r\n      dom.popover('show');\r\n    }\r\n  },\r\n  mouseleave: function() {\r\n    var dom = $(this), trigger = dom.data('desc');\r\n    if (trigger == 'hover') {\r\n      dom.popover('hide');\r\n    }\r\n  },\r\n  mousedown: function(e) {\r\n    if (e.button == 1) {\r\n      prevent_default(e);\r\n      var dom = $(this), trigger = dom.data('desc');\r\n      $dpop.update(this, dom);\r\n      if (trigger == 'hover') {\r\n        dom.data('desc', 'mclick');\r\n        $dpop.persist = dom;\r\n      } else {\r\n        dom.data('desc', 'hover');\r\n        $dpop.persist = null;\r\n      }\r\n    }\r\n    else {\r\n      var dom = $(this), trigger = dom.data('desc');\r\n      if (trigger == 'hover') {\r\n        dom.popover('hide');\r\n      }\r\n    }\r\n  },\r\n  update: function(thiz, dom) {\r\n    if ($dpop.persist && $dpop.persist.data('skill') != dom.data('skill')) {\r\n      $dpop.persist.data('desc', 'hover').popover('hide');\r\n      $dpop.persist = null;\r\n    }\r\n\r\n    dom.popover('hide');\r\n    update_description(thiz, dom);\r\n    dom.popover('show');\r\n  }\r\n};\r\n\r\n\r\nfunction desc_format(str, params) {\r\n  if (!str) return str;\r\n\r\n  if(params) {\r\n    params = params.split(',').map($d.params);\r\n  \r\n    for (var i = 0; i < params.length; i++) {\r\n      str = str.replace('{' + i + '}', params[i]);\r\n    }\r\n  }\r\n\r\n  var c = 0, w = 0, p = 0, newStr = \"\", startPos = 0;\r\n  for (var i = 0; i < str.length - 1; i++) {\r\n    switch (str.substr(i, 2)) {\r\n      case \"#y\": case \"#p\": case \"#r\": case \"#s\": case \"#v\":\r\n      if (c - w == 1) { // needed a closing </span>\r\n        newStr += str.substring(startPos, i) + \"</span><span class=\\\"\" + str.substr(i+1,1) + \"\\\">\";\r\n      } else {\r\n        newStr += str.substring(startPos, i) + \"<span class=\\\"\" + str.substr(i+1,1) + \"\\\">\";\r\n        c++;\r\n      }\r\n\r\n      startPos = i + 2;\r\n      ++i;\r\n      break;\r\n      case \"#w\":\r\n      if (w == c) { // early #w\r\n        newStr +=  str.substring(startPos, i);\r\n      } else {\r\n        newStr += str.substring(startPos, i) + \"</span>\";\r\n        w++;\r\n      }\r\n\r\n      startPos = i + 2;\r\n      ++i;\r\n      default:\r\n      break;\r\n    }\r\n  }\r\n\r\n  newStr = newStr + str.substr(startPos);\r\n\r\n  if (c != w) {\r\n    newStr = newStr + \"</span>\";\r\n  }\r\n\r\n  return newStr.replace(/\\\\n/g, \"<br />\");\r\n}\r\n\r\n\r\nvar desc_fields = tag('div').append(\r\n  desc_tag('dlvl', $lang.fields.lvl),\r\n  desc_tag('dmp', $lang.fields.mp),\r\n  desc_tag('dweaps', $lang.fields.weap),\r\n  desc_tag('dtype', $lang.fields.type),\r\n  desc_tag('dele', $lang.fields.element),\r\n  desc_tag('dcd', $lang.fields.cd),\r\n  desc_tag('dlimit', $lang.fields.limit),\r\n  desc_tag('dtsp', $lang.fields.tsp),\r\n  tag('div', 'divider dreq'),\r\n  tag('div', 'dreq o', $lang.req.lvl_up),\r\n  tag('div', 'dreq dreqlvl').append(\r\n    tag('span', null, $lang.req.char_lvl),\r\n    tag('span')\r\n  ),\r\n  tag('div', 'dreq dreqskills'),\r\n  tag('div', 'dreq dreqtsp'),\r\n  tag('div', 'dreq dreqsp').append(\r\n    tag('span', null, $lang.req.sp),\r\n    tag('span')\r\n  ),\r\n  tag('div', 'dnow').append(\r\n    tag('div', 'dnowf o', $lang.curr),\r\n    tag('div', 'dnowv')\r\n  ),\r\n  tag('div', 'divider dnextdiv'),\r\n  tag('div', 'dnext').append(\r\n    tag('div', 'dnextf o', $lang.next),\r\n    tag('div', 'dnextv')\r\n  )\r\n);\r\n","var techHTML;\r\nfunction techniques() {\r\n  var modal = $('#modal');\r\n  var title = $('#modal-title');\r\n  var body = $('#modal-body');\r\n\r\n  title.text(\"Techniques\");\r\n  body.empty();\r\n  if (!techHTML) {\r\n    body.text('Loading data...');\r\n    body.load('/api/' + dnskillsim_region + '/tech/' + Job.EnglishName, function(res) {\r\n      techHTML = res;\r\n      init_techs();\r\n    });\r\n  } else {\r\n    body.html(techHTML);\r\n    init_techs();\r\n  }\r\n\r\n  modal.modal('show');\r\n}\r\n\r\nfunction init_techs() {\r\n  var ids = ['necklace', 'earring', 'ring-1', 'ring-2', 'weapon', 'crest'];\r\n  var keys = ['Necklace', 'Earring', 'Ring1', 'Ring2', 'Weapon', 'Crest'];\r\n  ids.forEach(function(id, i) {\r\n    var tech = $('#tech-' + id);\r\n    var btn = tech.next();\r\n    var skillID = Job.Techs[keys[i]];\r\n    if (skillID) { // already has something at start\r\n      tech.val(skillID).prop('disabled', true);\r\n      btn.removeClass('btn-default').addClass('btn-danger').text('-1');\r\n    }\r\n\r\n    btn.prop('disabled', !tech.val() || !skillID);\r\n    tech.change(function() {\r\n      var val = tech.val();\r\n      btn.removeClass('btn-default btn-primary')\r\n         .addClass(val ? 'btn-primary' : 'btn-default')\r\n         .prop('disabled', !val);\r\n    });\r\n\r\n    btn.click(function() {\r\n      var skillID = Job.Techs[keys[i]];\r\n      btn.removeClass('btn-default btn-primary btn-danger');\r\n      if (skillID) { // remove tech\r\n        delete Job.Techs[keys[i]];\r\n        btn.text('+1').addClass('btn-primary');\r\n      } else { // add tech\r\n        Job.Techs[keys[i]] = skillID = num(tech.val());\r\n        btn.text('-1').addClass('btn-danger');\r\n      }\r\n\r\n      var dom = $('.skill').filter('[data-skill=' + skillID + ']');\r\n      update_skill_icon(skillID, dom);\r\n      if ($dpop.persist && $dpop.persist.data('skill') == skillID) {\r\n        $dpop.update(dom[0], dom);\r\n      }\r\n      tech.prop('disabled', !skillID);\r\n      tech_disable(Job.Techs);\r\n      history_push();\r\n    });\r\n  });\r\n\r\n  tech_disable(Job.Techs);\r\n}\r\n\r\nfunction get_tech_count(techs, skillID) {\r\n  if (skillID === undefined) {\r\n    skillID = techs;\r\n    techs = Job.Techs;\r\n  }\r\n\r\n  var c = 0;\r\n  for (var key in techs) {\r\n    if (techs[key] == skillID) {\r\n      c++;\r\n    }\r\n  }\r\n\r\n  return c;\r\n}\r\n\r\nfunction tech_disable(techs) {\r\n  // general disabling\r\n  var ids = ['necklace', 'earring', 'ring-1', 'ring-2', 'weapon'];\r\n  var keys = ['Necklace', 'Earring', 'Ring1', 'Ring2', 'Weapon'];\r\n\r\n  $('.modal').find('option:disabled').prop('disabled', false); // re-enable for now\r\n\r\n  for (var i = 0; i < keys.length; i++) {\r\n    var skillID = techs[keys[i]];\r\n    if (!skillID) {\r\n      continue;\r\n    }\r\n\r\n    var remainder = [].concat(ids);\r\n    remainder.splice(i,1); // take out self\r\n    remainder.forEach(function(id) {\r\n      if (techs[keys[ids.indexOf(id)]] != skillID) {\r\n        disable_skill_tech($('#tech-' + id), skillID);\r\n      }\r\n    });\r\n\r\n    var lvl = Job.Cache[skillID];\r\n    var skill = db.Skills[skillID];\r\n    var counts = get_tech_count(techs, skillID);\r\n    if (lvl[0] + counts >= skill.MaxLevel && techs.Crest != skillID) {\r\n      disable_skill_tech($('#tech-crest'), skillID);\r\n    }\r\n  }\r\n\r\n  // disable from crest\r\n  var skillID = techs.Crest;\r\n  if (skillID) {\r\n    var lvl = Job.Cache[skillID];\r\n    var skill = db.Skills[skillID];\r\n    var counts = get_tech_count(techs, skillID);\r\n    if (lvl[0] + counts >= skill.MaxLevel) {\r\n      ids.forEach(function(id, idx) {\r\n        if (techs[keys[idx]] != skillID) {\r\n          disable_skill_tech($('#tech-' + id), skillID);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // disable lvl 0 skills\r\n  ids.push('crest');\r\n  ids.forEach(function(id) {\r\n    var tech = $('#tech-' + id);\r\n    for (var skillID in db.Skills) {\r\n      var lvl = Job.Cache[skillID];\r\n      if (!lvl[0]) {\r\n        disable_skill_tech(tech, skillID);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nfunction disable_skill_tech(tech, skillID) {\r\n  var btn = tech.next();\r\n  if (tech.val() == skillID) { // don't keep it selected\r\n    tech.val('');\r\n    btn.removeClass('btn-primary btn-danger')\r\n       .addClass('btn-default')\r\n       .prop('disabled', true)\r\n       .text('+1');\r\n  }\r\n\r\n  // disable the option\r\n  var opt = tech.find('option[value=' + skillID + ']');\r\n  if (opt.length) {\r\n    opt.prop('disabled', true);\r\n  }\r\n}\r\n"]}